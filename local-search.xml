<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>有趣的网站第一期</title>
    <link href="/posts/189e43e7/"/>
    <url>/posts/189e43e7/</url>
    
    <content type="html"><![CDATA[<h1 id="🐾-Coding-Kitty"><a href="#🐾-Coding-Kitty" class="headerlink" title="🐾 Coding Kitty"></a>🐾 <a href="https://hostrider.com/">Coding Kitty</a></h1><p>一个猫咪白噪音网站，它不仅为编程爱好者带来宁静，还融入了可爱的编程猫形象，让编程时光不再枯燥。网站设计中穿插的互动元素，令人眼前一亮。更值得一提的是，作者在<a href="https://hostrider.com/credits.html">Credits and Attributions</a>页面上详细记录了网站的构建过程，包括所使用的开源代码和音乐，彰显出对创作社区的尊重与热爱。对于喜欢编程的朋友来说，这绝对是一个不容错过的可爱角落。<br><img src="/img/WebsiteRecommondation/codingkitty.png" alt="Coding Kitty"></p><h1 id="📖-Can’t-Sleep-Reads"><a href="#📖-Can’t-Sleep-Reads" class="headerlink" title="📖 Can’t Sleep Reads"></a>📖 <a href="https://cantsleepreads.com/">Can’t Sleep Reads</a></h1><p>这个网站可以随机打开一个短篇小说故事，看域名就知道作者是希望想让失眠的人看书睡觉，故事内容都是来自一些公共资源没有版权问题，还挺有意思。<br><img src="/img/WebsiteRecommondation/cantsleepread.png" alt="Can&#39;t Sleep Reads"></p><h1 id="🧰-Just-Free"><a href="#🧰-Just-Free" class="headerlink" title="🧰 Just Free"></a>🧰 <a href="https://www.justfree.io/">Just Free</a></h1><p>这个网站整理了很多免费的创业者&#x2F;创作者的工具和资源。其中包括截图生成器、AI图标生成器、广告模拟生成器、广告文案生成器、Lead Magnet生成器、文本转图像生成器、创意和文案模板、产品模型生成器、浏览器模拟生成器、幻灯片制作指南、Instagram模板和Favicon生成器等。<br><img src="/img/WebsiteRecommondation/justfree.png" alt="Just Free"></p><h1 id="🔜-Upside-Down-Text-Generator"><a href="#🔜-Upside-Down-Text-Generator" class="headerlink" title="🔜 Upside Down Text Generator"></a>🔜 <a href="https://upsidedowntext.top/">Upside Down Text Generator</a></h1><p>这是一个用来翻转文本的工具，输入文本内容，会使用不同的Unicode字符将其翻转成酷炫的倒置文本。例如：Good Morning的倒置形式是⅁oop ꟽoɹuᴉuɓ<br><img src="/img/WebsiteRecommondation/updowntext.png" alt="Upside Down Text Generator"></p><h1 id="🗃️-Proximity-Glow-Cards"><a href="#🗃️-Proximity-Glow-Cards" class="headerlink" title="🗃️ Proximity Glow Cards"></a>🗃️ <a href="https://codepen.io/jh3y/pen/QWYPaax">Proximity Glow Cards</a></h1><p>一个特别好看的卡片效果代码，相关代码可以去上面codepen链接看。<br><img src="/img/WebsiteRecommondation/card.png" alt="Proximity Glow Cards"></p>]]></content>
    
    
    <categories>
      
      <category>有趣的网站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网站分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello Hexo</title>
    <link href="/posts/a2676cd4/"/>
    <url>/posts/a2676cd4/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>TFT_espi图片转换脚本</title>
    <link href="/posts/fdd48e00/"/>
    <url>/posts/fdd48e00/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在用Ardunio的TFT_espi这个库时每次想显示图片都要用某些已有的工具软件转换成bitmap或者数组，但是我见过的工具都只能一张一张的转换，如果想转换GIF或者视频真的太麻烦了，所以就写了两个脚本。</p></blockquote><span id="more"></span><p>完整代码在<a href="https://gitee.com/Zone2515/esp32/tree/master/%E5%A4%A9%E6%B0%94%E6%97%B6%E9%92%9F/%E5%9B%BE%E5%83%8F%E8%BD%AC%E6%8D%A2%E8%84%9A%E6%9C%AC">图像转换脚本</a>，这里只记录一些关键的地方。</p><h2 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h2><p>许多图形库提供的接口都是显示bitmap或者图像数组是，所以我先把常见格式的图片或者动图转成bmp，然后再把RGB888的bmp转成RGB565的数组。</p><h3 id="按系统顺序读取目录下所有图片文件"><a href="#按系统顺序读取目录下所有图片文件" class="headerlink" title="按系统顺序读取目录下所有图片文件"></a>按系统顺序读取目录下所有图片文件</h3><p>像os.listdir()或者glob.glob()返回地顺序是乱的，对于文件名有规律地可以自己实现排序，但是对于没有规律的自己排序还是比较麻烦的。</p><p><code>natsort</code>这个包可以对文件名排序，非常方便地排成和我们在资源管理器看到的文件顺序一样。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_image_files</span>(<span class="hljs-params">folder_path</span>):<br>    pattern = <span class="hljs-string">r&quot;.*\.(jpg|jpeg|png|bmp|gif|webp|ico|pbm|pgm|ppm|mp4)$&quot;</span><br>    image_files = []<br>    files = os.listdir(folder_path)<br>    <span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> natsorted(files,alg=ns.PATH):<br>        <span class="hljs-keyword">if</span> re.<span class="hljs-keyword">match</span>(pattern, file_name, re.IGNORECASE):<br>            image_files.append(os.path.join(folder_path, file_name))<br>    <span class="hljs-keyword">return</span> image_files<br></code></pre></td></tr></table></figure><h3 id="读取GIF"><a href="#读取GIF" class="headerlink" title="读取GIF"></a>读取GIF</h3><p>缩放指定大小，均匀采样指定帧数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_gif</span>(<span class="hljs-params">gif: Image.Image, dsize: <span class="hljs-built_in">tuple</span>[<span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>], maximum_frames=<span class="hljs-number">0</span></span>) -&gt; <span class="hljs-built_in">list</span>[Image.Image]:<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    @param gif: Image 源GIF</span><br><span class="hljs-string">    @param dsize: (int,int) 目标图像的(宽度，高度)</span><br><span class="hljs-string">    @param maximum_frames: int 保留帧数</span><br><span class="hljs-string">    @return [Image.Image,...]</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    frames = gif.n_frames<br>    gif.info[<span class="hljs-string">&#x27;frames&#x27;</span>] = frames<br>    f = <span class="hljs-built_in">min</span>(frames, maximum_frames) <span class="hljs-keyword">if</span> maximum_frames &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> frames<br>    step = math.ceil(frames/f)<br>    counter = <span class="hljs-number">0</span><br>    aframes = []<br>    <span class="hljs-keyword">for</span> frame <span class="hljs-keyword">in</span> ImageSequence.Iterator(gif):<br>        <span class="hljs-keyword">if</span> counter % step == <span class="hljs-number">0</span>:<br>            aframes.append(frame.resize(dsize))<br>        counter += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> aframes<br></code></pre></td></tr></table></figure><h3 id="读取mp4"><a href="#读取mp4" class="headerlink" title="读取mp4"></a>读取mp4</h3><p>跟GIF类似，但是PIL没找到读取时视频文件的方法，这里用了opencv</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_mp4</span>(<span class="hljs-params">file: <span class="hljs-built_in">str</span>, dsize: <span class="hljs-built_in">tuple</span>[<span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>], maximum_frames=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    @param file: str MP4文件路径</span><br><span class="hljs-string">    @param dsize: (int,int) 目标图像的(宽度，高度)</span><br><span class="hljs-string">    @param maximum_frames: int 保留帧数</span><br><span class="hljs-string">    @return [Image.Image(), ...]</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    aframes = []<br>    cap = cv.VideoCapture(file)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cap.isOpened():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无法打开视频文件:&quot;</span>, file)<br>        cap.release()<br>        <span class="hljs-keyword">return</span> aframes<br>    frames = <span class="hljs-built_in">int</span>(cap.get(cv.CAP_PROP_FRAME_COUNT))<br>    f = <span class="hljs-built_in">min</span>(frames, maximum_frames) <span class="hljs-keyword">if</span> maximum_frames &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> frames<br>    step = math.ceil(frames/f)<br>    ret = <span class="hljs-literal">True</span><br>    counter = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> ret:<br>        ret, frame = cap.read()<br>        <span class="hljs-keyword">if</span> frame <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            frame = cv.cvtColor(frame,cv.COLOR_BGR2RGB)<br>            <span class="hljs-keyword">if</span> counter % step == <span class="hljs-number">0</span>:<br>                aframes.append(Image.fromarray(cv.resize(frame,dsize)))<br>            counter+=<span class="hljs-number">1</span><br>    cap.release()<br>    <span class="hljs-keyword">return</span> aframes<br></code></pre></td></tr></table></figure><h3 id="bmp转RGB565-hex数组"><a href="#bmp转RGB565-hex数组" class="headerlink" title="bmp转RGB565 hex数组"></a>bmp转RGB565 hex数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">bmp_to_hex_RGB565</span>(<span class="hljs-params">filepath,head=<span class="hljs-string">&#x27;&#x27;</span>,tail=<span class="hljs-string">&#x27;&#x27;</span></span>) -&gt;<span class="hljs-built_in">str</span>:<br>    image = Image.<span class="hljs-built_in">open</span>(filepath)<br>    image = image.convert(<span class="hljs-string">&quot;RGB&quot;</span>)<br>    width, height = image.size<br>    image_data = []<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>            r, g, b = image.getpixel((x, y))<br>            pixel = ((r &amp; <span class="hljs-number">0xF8</span>) &lt;&lt; <span class="hljs-number">8</span>) | ((g &amp; <span class="hljs-number">0xFC</span>) &lt;&lt; <span class="hljs-number">3</span>) | (b &gt;&gt; <span class="hljs-number">3</span>)<br>            image_data.append(pixel)<br>    hex_data = [<span class="hljs-built_in">hex</span>(pixel) <span class="hljs-keyword">for</span> pixel <span class="hljs-keyword">in</span> image_data]<br>    <span class="hljs-keyword">return</span> head+<span class="hljs-built_in">str</span>(hex_data).replace(<span class="hljs-string">&#x27;\&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;[&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#x27;</span>).replace(<span class="hljs-string">&#x27;]&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#x27;</span>)+tail<br></code></pre></td></tr></table></figure><h2 id="脚本使用说明"><a href="#脚本使用说明" class="headerlink" title="脚本使用说明"></a>脚本使用说明</h2><h3 id="tobmp-py"><a href="#tobmp-py" class="headerlink" title="tobmp.py"></a>tobmp.py</h3><p>输入输出如下</p><ul><li>GIF&#x2F;mp4👉文件目录下创建同名目录存放bmp</li><li>图片文件&#x2F;图片文件目录👉文件目录下创建输出目录存放bmp</li></ul><p>options:</p><ul><li>-h, –help</li><li>-F FOLDERPATH, –folderpath FOLDERPATH<br>                图片所在文件夹</li><li>-W WIDTH, –width WIDTH<br>                缩放后图像的宽度</li><li>-H HEIGHT, –height HEIGHT<br>                缩放后图像的高度</li><li>-f FRAMES, –frames FRAMES<br>                GIF文件保留帧数</li><li>-v FRAMENUM, –framenum FRAMENUM<br>                查看文件帧数</li></ul><p><img src="https://n.sinaimg.cn/sinakd202042s/556/w356h200/20200402/d6ea-irtymmv4160044.gif" alt="gege.gif"></p><p>&gt;&gt;<code>python .\tobmp.py -F .\imgs\gege.gif -W 64 -H 64 -v 1</code></p><p>&gt;&gt;<code>文件帧数：212</code></p><p>&gt;&gt;<code>python .\tobmp.py -F .\imgs\gege.gif -W 64 -H 64 -f 106</code></p><p>就会在imgs目录下生成bmps目录，bmps目录里有gege目录，gege目录里有106张64×64 bmp图像并且文件名为0-105。</p><h3 id="bmptohex-RGB565-py"><a href="#bmptohex-RGB565-py" class="headerlink" title="bmptohex_RGB565.py"></a>bmptohex_RGB565.py</h3><p>输入输出如下</p><ul><li>bmp文件👉一维数组</li><li>bmp所在目录👉n维数组</li></ul><p>options:</p><ul><li>-h, –help show this help message and exit</li><li>-F PATH, –path PATH  bmp图片或bmp图片目录路径</li></ul><p>&gt;&gt;<code>python .\bmptohex_RGB565.py -F .\imgs\bmps\gege\</code></p><p>就会在imgs\bmps\gege下生成hexRGB565.txt文件，复制此内容到Ardunio稍加修改即可食用。</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ardunio</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>读《Transformer》</title>
    <link href="/posts/3d8c967c/"/>
    <url>/posts/3d8c967c/</url>
    
    <content type="html"><![CDATA[<blockquote><p>节选了部分原论文内容，认真读一下这篇大名鼎鼎的transformer，旨在加深理解和学英语O(∩_∩)O</p></blockquote><span id="more"></span><h1 id="Attention-Is-All-You-Need"><a href="#Attention-Is-All-You-Need" class="headerlink" title="Attention Is All You Need"></a>Attention Is All You Need</h1><p>有点霸气</p><h2 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h2><blockquote><p>The dominant sequence transduction models are based on complex recurrent or convolutional neural networks that include an encoder and a decoder.</p></blockquote><p>主流的序列转换模型都是基于包含编码器和解码器的循环或卷积神经网络。</p><blockquote><p>The best performing models also connect the encoder and decoder through an attention mechanism. </p></blockquote><p>表现最好的模型也是通过注意力机制连接编码器和解码器。</p><blockquote><p>We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and convolutions entirely.</p></blockquote><p>我们提出了一种新型简单的网络架构，Transformer，只基于注意力机制，完全不需要循环和卷积。</p><blockquote><p>Experiments on two machine translation tasks show these models to be superior in quality while being more parallelizable and requiring significantly less time to train.</p></blockquote><p>在两个机器翻译任务的实验上表现出这些模型具有更好的质量，同时具有更强的并行性，训练时间明显减少。</p><blockquote><p>Our model achieves 28.4 BLEU on the WMT 2014 English-to-German translation task, improving over the existing best results, including ensembles, by over 2 BLEU. On the WMT 2014 English-to-French translation task, our model establishes a new single-model state-of-the-art BLEU score of 41.8 after training for 3.5 days on eight GPUs, a small fraction of the training costs of the best models from the literature. </p></blockquote><p>我们的模型在WMT2014英转德翻译任务上实现了28.4 BLEU，比目前全部最好的结果提高了2 BLEU。在WMT2014英转法翻译任务上，我们的模型在 8个GPU训练了3天半（文献中最好模型训练成本的一小部分）后以41.8刷新了单模型最高的BLUE成绩。</p><blockquote><p>We show that the Transformer generalizes well to other tasks by applying it successfully to English constituency parsing both with large and limited training data.</p></blockquote><p>把它成功用在大量和有限的训练数据的英语语句成分分析表明了Transformer在其他任务上具有不错的泛化性。</p><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1.Introduction"></a>1.Introduction</h2><blockquote><p>Recurrent neural networks, long short-term memory and gated recurrent neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation. Numerous efforts have since continued to push the boundaries of recurrent language models and encoder-decoder architectures.</p></blockquote><p>RNN，特别是LSTM和门控RNN，已经在像语言模型化和机器翻译这样的序列模型化和转换问题被坚定地确立为最先进的方法。此后许多努力继续推动循环语言模型和编解码架构的边界。</p><blockquote><p>Recurrent models typically factor computation along the symbol positions of the input and output sequences. Aligning the positions to steps in computation time, they generate a sequence of hidden states <code>$h_t$</code> , as a function of the previous hidden state <code>$h_&#123;t-1&#125;$</code> and the input for position <code>$t$</code> .</p></blockquote><p>循环模型通常考虑沿着输入和输出序列的符号位置计算。把位置和计算时间的步数对齐，他们产生一个隐藏状态序列  <code>$h_t$</code> ，作为先前的隐藏状态 <code>$h_&#123;t-1&#125;$</code> 和位置 <code>$t$</code> 输入的函数。</p><blockquote><p>This inherently sequential nature precludes parallelization within training examples, which becomes critical at longer sequence lengths, as memory constraints limit batching across examples.Recent work has achieved significant improvements in computational efficiency through factorization tricks and conditional computation, while also improving model performance in case of the latter. The fundamental constraint of sequential computation, however, remains.</p></blockquote><p>这种固有的顺序性排除了在训练样本时并行化，对于较长的序列变得严重因为内存约束限制样本批处理。最近的工作通过分解技巧和条件计算已经显著改善了计算效率，同时后者也提高了模型性能。然而序列计算的基本限制仍然存在。</p><blockquote><p>Attention mechanisms have become an integral part of compelling sequence modeling and transduction models in various tasks, allowing modeling of dependencies without regard to their distance in the input or output sequences. In all but a few cases, however, such attention mechanisms are used in conjunction with a recurrent network.</p></blockquote><p>注意力机制已经成为在许多任务中引人注目的序列模型和转换模型不可或缺的一部分，允许对依赖关系进行建模，而不考虑它们在输入或输出序列中的距离。然而除了少数外，这种注意力机制被用在与循环网络结合。</p><blockquote><p>In this work we propose the Transformer, a model architecture eschewing recurrence and instead relying entirely on an attention mechanism to draw global dependencies between input and output. The Transformer allows for significantly more parallelization and can reach a new state of the art in translation quality after being trained for as little as twelve hours on eight P100 GPUs.</p></blockquote><p>这次我们提出了Transformer，一种避免循环也不完全依赖注意力机制来描述输入输出间的全局依赖关系的模型架构。Transformer明显允许更强的并行化并且能够在8个P100 GPU上被训练仅12个小时后达到翻译质量的一个新境界。</p><h2 id="2-Background"><a href="#2-Background" class="headerlink" title="2.Background"></a>2.Background</h2><blockquote><p>The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU, ByteNet and ConvS2S, all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes it more difficult to learn dependencies between distant positions. In the Transformer this is reduced to a constant number of operations, albeit at the cost of reduced effective resolution due to averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as described in section 3.2.</p></blockquote><p>减少顺序计算的目标也形成了Extended Neural GPU，ByteNet和ConvS2S的基础，他们都使用卷积神经网络作为基础构建块，对所有的输入输出位置并行计算隐藏层。在这些模型中，将任意两个输入或输出位置信号关联起来的参数随着两个位置的距离增长，ConS2S是线性的，ByteNet是对数的。这使得远距离位置的依赖关系难以学习。在Transformer中尽管由于平均注意力加权位置减少有效分辨率为代价，这被简化成一个常量，我们用在3.2节描述的多头注意力来抵消这个效果。</p><blockquote><p>Self-attention, sometimes called intra-attention is an attention mechanism relating different positions of a single sequence in order to compute a representation of the sequence. Self-attention has been used successfully in a variety of tasks including reading comprehension, abstractive summarization, textual entailment and learning task-independent sentence representations.</p></blockquote><p>自注意力，有时被称为内注意力，是一种关于一个信号序列的不同位置的注意力机制，为了计算这个序列的表征。自注意力已经被成功地用在各种各样的任务中包括阅读理解，抽象概括，文本语义和依赖于语句特征的学习任务。</p><blockquote><p>End-to-end memory networks are based on a recurrent attention mechanism instead of sequence aligned recurrence and have been shown to perform well on simple-language question answering and language modeling tasks.</p></blockquote><p>端到端记忆网络基于循环注意力机制而不是序列对齐的循环并且已被证明在简单语言问答和语言建模任务上表现很好。</p><blockquote><p>To the best of our knowledge, however, the Transformer is the first transduction model relying entirely on self-attention to compute representations of its input and output without using sequence-aligned RNNs or convolution. </p></blockquote><p>然而，据我们所知，Transformer是第一个没有使用序列对齐的RNN或者卷积完全依赖自注意力来计算输入输出的特征的转换模型。</p><h2 id="3-Model-Architecture"><a href="#3-Model-Architecture" class="headerlink" title="3.Model Architecture"></a>3.Model Architecture</h2><blockquote><p>Most competitive neural sequence transduction models have an encoder-decoder structure. Here, the encoder maps an input sequence of symbol representations (<code>$x_1,...,x_n$</code>) to a sequence of continuous representations <code>$z=(z_1,...,z_n)$</code> Given <code>$z$</code> , the decoder then generates an output sequence <code>$(y_1,...,y_m)$</code> of symbols one element at a time. At each step the model is auto-regressive, consuming the previously generated symbols as additional input when generating the next.</p></blockquote><p>大多具有竞争力的神经序列转换模型用编解码的架构。这里，编码器映射由(<code>$x_1,...,x_n$</code>)表示的输入序列到由 <code>$z=(z_1,...,z_n)$</code> 表示的连续序列，然后解码器一次生成一个由<code>$(y_1,...,y_m)$</code>表示的输出序列中的一个元素。每一步模型是自动回归的，当生成下一个时用先前生成的特征作为加性输入。</p><blockquote><p>The Transformer follows this overall architecture using stacked self-attention and point-wise, fully connected layers for both the encoder and decoder, shown in the left and right halves of Figure 1, respectively.</p></blockquote><p>Transformer遵循使用自注意力堆叠和整体架构和逐点全连接层的编码器和解码器的整体架构，分别展示在Figue 1的左右两部分。</p><p><img src="https://bbs-img-cbc-cn.obs.cn-north-1.myhuaweicloud.com/data/attachment/forum/202101/01/215059a5naotj646bx1pel.png" alt="Figure1"></p><h3 id="3-1Encoder-and-Decoder-Stacks"><a href="#3-1Encoder-and-Decoder-Stacks" class="headerlink" title="3.1Encoder and Decoder Stacks"></a>3.1Encoder and Decoder Stacks</h3><blockquote><p><strong>Encoder</strong>: The encoder is composed of a stack of <code>$N = 6$</code> identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position-wise fully connected feed-forward network. We employ a residual connection around each of the two sub-layers, followed by layer normalization. That is, the output of each sub-layer is <code>$LayerNorm(x + Sublayer(x))$</code> , where <code>$Sublayer(x)$</code> is the function implemented by the sub-layer itself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding layers, produce outputs of dimension <code>$d_&#123;model&#125; = 512$</code> .</p></blockquote><p><strong>编码器</strong>：编码器由<code>$N = 6$</code>完全一样的层的栈构成的。每一层有两个子层。第一层是多头自注意力机制，第二层是一个简单的按位置全连接的前馈网络。我们在两个子层的每一层周围用了残差连接，接着层归一化。也就是说，每一个子层的输出是<code>$LayerNorm(x + Sublayer(x))$</code>，这里的<code>$Sublayer(x)$</code>是子层本身实现的函数。为了方便这些残差连接，所有模型的子层还有嵌入层的输出维度是<code>$d_&#123;model&#125; = 512$</code>。</p><blockquote><p><strong>Decoder</strong>: The decoder is also composed of a stack of <code>$N = 6$</code> identical layers. In addition to the two sub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head attention over the output of the encoder stack. Similar to the encoder, we employ residual connections around each of the sub-layers, followed by layer normalization. We also modify the self-attention sub-layer in the decoder stack to prevent positions from attending to subsequent positions. This masking, combined with fact that the output embeddings are offset by one position, ensures that the predictions for position <code>$i$</code> can depend only on the known outputs at positions less than <code>$i$</code>.</p></blockquote><p><strong>解码器</strong>：解码器也是由<code>$N = 6$</code>完全一样的层的栈构成的。除了在每个编码器层的两个子层，解码器插入了第三个子层，他对编码器栈的输出做多头注意力。跟编码器相似，我们也在每个子层周围用残差连接，接着层归一化。我们也修改了解码器栈的自注意子层来防止位置关注到后续位置。这样掩蔽(Mask)，与输出嵌入被一个位置偏移结合，确保对位置<code>$i$</code>的预测只能依赖位置小于<code>$i$</code>的已知输出。</p><h3 id="3-2-Attention"><a href="#3-2-Attention" class="headerlink" title="3.2 Attention"></a>3.2 Attention</h3><blockquote><p>An attention function can be described as mapping a query and a set of key-value pairs to an output, where the query, keys, values, and output are all vectors. The output is computed as a weighted sum of the values, where the weight assigned to each value is computed by a compatibility function of the query with the corresponding key.</p></blockquote><p>注意力函数可以被描述成映射一个查询(<code>$Q$</code>)和一组键值对(<code>$K:V$</code>)到一个输出，这里的<code>$Q$</code>,<code>$K$</code>,<code>$V$</code>都是向量。输出是<code>$V$</code>加权求和计算得到的，分配给每个<code>$V$</code>的权重是由查询<code>$Q$</code>和相应的键<code>$K$</code>的一个相似性函数计算得到的。</p><p><img src="https://pic4.zhimg.com/v2-3423dd5e8ac178dd303f3e52b32b8d56_r.jpg" alt="Figure 2"></p><h4 id="3-2-1-Scaled-Dot-Product-Attention"><a href="#3-2-1-Scaled-Dot-Product-Attention" class="headerlink" title="3.2.1 Scaled Dot-Product Attention"></a>3.2.1 Scaled Dot-Product Attention</h4><blockquote><p>We call our particular attention “Scaled Dot-Product Attention” (Figure 2). The input consists of queries and keys of dimension <code>$d_k$</code> , and values of dimension <code>$d_v$</code> . We compute the dot products of the query with all keys, divide each by <code>$\sqrt&#123;d_k&#125;$</code> , and apply a softmax function to obtain the weights on the values.</p></blockquote><p>我们把我们特别的注意力称为“缩放的点积注意力”（图2）。输入是由 <code>$q$</code>和<code>$d_k$</code> 维的<code>$k$</code>以及<code>$d_v$</code>的<code>$v$</code>构成的。我们计算<code>$q$</code>和所有<code>$k$</code>的点积，每一个除以<code>$\sqrt&#123;d_k&#125;$</code>，然后用一个softmax函数来获得不同<code>$v$</code>的权重。</p><blockquote><p>In practice, we compute the attention function on a set of queries simultaneously, packed together into a matrix $Q$ . The keys and values are also packed together into matrices <code>$K$</code> and <code>$V$</code> . We compute the matrix of outputs as:</p></blockquote><p>实际上，我们是把一组<code>$q$</code>打包成一个矩阵<code>$Q$</code>同时计算注意力函数。<code>$k$</code>和<code>$v$</code>也是一起被打包进矩阵<code>$K$</code>和<code>$V$</code>。我们计算输出矩阵如下：</p><p>$$<br>Attention(Q,K,V)&#x3D;softmax(\frac{QK^T}{\sqrt{d_k}}V)<br>$$</p><blockquote><p>The two most commonly used attention functions are additive attention, and dot-product (multi-plicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor of <code>$\frac&#123;1&#125;&#123;\sqrt&#123;d_k&#125;&#125;$</code>. Additive attention computes the compatibility function using a feed-forward network with a single hidden layer. While the two are similar in theoretical complexity, dot-product attention is much faster and more space-efficient in practice, since it can be implemented using highly optimized matrix multiplication code.</p></blockquote><p>两种最常用的注意力函数是加性注意力和乘性(点积)注意力。点积的注意力和我们的算法除了 <code>$\frac&#123;1&#125;&#123; \sqrt&#123;d_k&#125; &#125;$</code> 这个缩放因子是一样的。加性注意力用一个单一隐藏层的前馈网络计算相似函数。虽然这两种算法在理论上的复杂性是相似的，但是实践中点积注意力更快，更省空间，因为他可以用高度优化的矩阵乘法代码实现。</p><blockquote><p>While for small values of <code>$d_k$</code> the two mechanisms perform similarly, additive attention outperforms dot product attention without scaling for larger values of <code>$d_k$</code>. We suspect that for large values of <code>$d_k$</code> , the dot products grow large in magnitude, pushing the softmax function into regions where it has extremely small gradients. To counteract this effect, we scale the dot products by <code>$\frac&#123;1&#125;&#123;\sqrt&#123;d_k&#125;&#125;$</code> .</p></blockquote><p>然而对于小的<code>$d_k$</code>两种机制表现差不多，对于更大的<code>$d_k$</code>加性注意力优于不带缩放的点积注意力。我们猜想对于大的<code>$d_k$</code>点积变的很大，使softmax进入梯度非常小的区域。为了抵消这种效应，我们把点积缩小了 <code>$\frac&#123;1&#125;&#123;\sqrt&#123;d_k&#125;&#125;$</code> 。</p><h4 id="3-2-2-Multi-Head-Attention"><a href="#3-2-2-Multi-Head-Attention" class="headerlink" title="3.2.2 Multi-Head Attention"></a>3.2.2 Multi-Head Attention</h4><blockquote><p>Instead of performing a single attention function with <code>$d_&#123;model&#125;$</code>-dimensional keys, values and queries, we found it beneficial to linearly project the queries, keys and values <code>$h$</code> times with different, learned linear projections to <code>$d_k$</code> , <code>$d_k$</code> and <code>$d_v$</code> dimensions, respectively. On each of these projected versions of queries, keys and values we then perform the attention function in parallel, yielding  <code>$d_v$</code> -dimensional output values. These are concatenated and once again projected, resulting in the final values.</p></blockquote><p>与用<code>$d_&#123;model&#125;$</code>维的<code>$k,v和q$</code>执行单一注意力函数不同，我们发现用分别到<code>$d_k$</code> , <code>$d_k$</code> 和 <code>$d_v$</code>不同的学习到的线性映射对线性映射<code>$q,k,v$</code>h次是有益的(结合图片看）。对这些<code>$q,k,v$</code>的每一个投影版我们接着并行地执行注意力函数，生成一些<code>$d_v$</code>维的输出。把这些输出连接起来再次映射生成最终的结果。</p><blockquote><p>Multi-head attention allows the model to jointly attend to information from different representation subspaces at different positions. With a single attention head, averaging inhibits this.</p></blockquote><p>多头注意力让模型共同关注来自不同的在不同位置的子空间特征。用一个注意力头平均抑制了这一点。</p><p>$$<br>MultiHead(Q,K,V) &#x3D; Concat(head_1 ,…,head_h )W^O<br>$$<br>$$<br>where\ head_i &#x3D; Attention(QW_i^Q,KW_i^K,VW^V_i)<br>$$</p><blockquote><p>Where the projections are parameter matrices <code>$W_i^Q\in R^&#123;d_&#123;model&#125;\times d_k&#125;$</code> , <code>$W_i^K \in R^&#123;d_&#123;model&#125; \times d_k&#125;$</code> , <code>$W_i^V \in R^&#123;d_&#123;model&#125; \times d_v&#125;$</code>and <code>$W^O \in R^&#123;hd_v \times d_&#123;model&#125;&#125;$</code> .</p></blockquote><blockquote><p>In this work we employ <code>$h = 8$</code> parallel attention layers, or heads. For each of these we use <code>$d_k = d_v = d_&#123;model&#125;/h = 64$</code> . Due to the reduced dimension of each head, the total computational cost is similar to that of single-head attention with full dimensionality.</p></blockquote><p>在这次工作中我们采用了 <code>$h=8$</code> 并行注意力层（头）。对这些中的每一个我们用 <code>$d_k = d_v = d_&#123;model&#125;/h = 64$</code> 。由于减小了每个头的维度，总计算量和单头全维度的注意力相近。</p><h4 id="3-2-3-Applications-of-Attention-in-our-Model"><a href="#3-2-3-Applications-of-Attention-in-our-Model" class="headerlink" title="3.2.3 Applications of Attention in our Model"></a>3.2.3 Applications of Attention in our Model</h4><blockquote><p>The Transformer uses multi-head attention in three different ways:</p></blockquote><p>Transformer 以三种不同的方式使用多头注意力。</p><blockquote><ul><li>In “encoder-decoder attention” layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder. This allows every position in the decoder to attend over all positions in the input sequence. This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models.</li></ul></blockquote><ul><li>在”encoder-decoder attention”层，查询值来自先前的解码层，存储的键值对来自编码器的输出。这让解码器的每个位置关注输入序列的全部位置。这模仿了在 sequence-to-sequence模型中典型的编解码注意力机制。</li></ul><blockquote><ul><li>The encoder contains self-attention layers. In a self-attention layer all of the keys, values and queries come from the same place, in this case, the output of the previous layer in the encoder. Each position in the encoder can attend to all positions in the previous layer of the encoder.</li></ul></blockquote><ul><li>编码器包含自注意力层。在自注意力层中所有的键值和查询在这种情况下都来自相同的地方——编码器的前层的输出。</li></ul><blockquote><ul><li>Similarly, self-attention layers in the decoder allow each position in the decoder to attend to all positions in the decoder up to and including that position. We need to prevent leftward information flow in the decoder to preserve the auto-regressive property. We implement this inside of scaled dot-product attention by masking out (setting to −∞ ) all values in the input of the softmax which correspond to illegal connections. See Figure 2.</li></ul></blockquote><ul><li>类似的，在解码器的自注意力层让解码器的每个位置关注到解码器的所有位置包括那个位置。我们需要阻止左边的信息流入到解码器来维持自回归的特性。我们通过遮盖（设置为-∞）对应不合理连接的softmax输入的所有值，在缩放点积注意力中实现这一点。</li></ul><h3 id="3-3-Position-wise-Feed-Forward-Networks"><a href="#3-3-Position-wise-Feed-Forward-Networks" class="headerlink" title="3.3 Position-wise Feed-Forward Networks"></a>3.3 Position-wise Feed-Forward Networks</h3><blockquote><p>In addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully connected feed-forward network, which is applied to each position separately and identically. This consists of two linear transformations with a ReLU activation in between.<br>$$<br>FFN(x) &#x3D; max(0,xW_1 + b_1)W_2 + b_2<br>$$<br>While the linear transformations are the same across different positions, they use different parameters from layer to layer. Another way of describing this is as two convolutions with kernel size 1. The dimensionality of input and output is <code>$d_&#123;model&#125; = 512$</code>, and the inner-layer has dimensionality<br><code>$d_&#123;ff&#125;$</code> &#x3D; 2048.</p></blockquote><h3 id="3-4-Embeddings-and-Softmax"><a href="#3-4-Embeddings-and-Softmax" class="headerlink" title="3.4 Embeddings and Softmax"></a>3.4 Embeddings and Softmax</h3><blockquote><p>Similarly to other sequence transduction models, we use learned embeddings to convert the input tokens and output tokens to vectors of dimension <code>$d_&#123;model&#125;$</code> . We also use the usual learned linear transfor-mation and softmax function to convert the decoder output to predicted next-token probabilities. In our model, we share the same weight matrix between the two embedding layers and the pre-softmax linear transformation, similar to [ 30 ]. In the embedding layers, we multiply those weights by <code>$\sqrt&#123;d_&#123;model&#125;&#125;$</code> model .</p></blockquote><h3 id="3-5-Positional-Encoding"><a href="#3-5-Positional-Encoding" class="headerlink" title="3.5 Positional Encoding"></a>3.5 Positional Encoding</h3><blockquote><p>Since our model contains no recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence. To this end, we add “positional encodings” to the input embeddings at the bottoms of the encoder and decoder stacks. The positional encodings have the same dimension d model as the embeddings, so that the two can be summed. There are many choices of positional encodings, learned and fixed.</p></blockquote><blockquote><p>In this work, we use sine and cosine functions of different frequencies:<br>$$<br>PE(pos,2i) &#x3D; sin(pos&#x2F;10000^{2i&#x2F;d_{model}})<br>$$<br>$$<br>PE(pos,2i+1) &#x3D; cos(pos&#x2F;10000^{2i&#x2F;d_{model}})<br>$$<br>where <code>$pos$</code> is the position and <code>$i$</code> is the dimension. That is, each dimension of the positional encoding corresponds to a sinusoid. The wavelengths form a geometric progression from 2π to 10000·2π . We chose this function because we hypothesized it would allow the model to easily learn to attend by relative positions, since for any fixed offset <code>$k$</code>,  <code>$PE_&#123;pos&#125;+k$</code> can be represented as a linear function of <code>$PE_&#123;pos&#125;$</code> .</p></blockquote><blockquote><p>We also experimented with using learned positional embeddings instead, and found that the two versions produced nearly identical results (see Table 3 row (E)). We chose the sinusoidal version because it may allow the model to extrapolate to sequence lengths longer than the ones encountered during training.</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>论文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nlp</tag>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>免费部署ChatGPT4等国内可访问网站</title>
    <link href="/posts/1cd5914f/"/>
    <url>/posts/1cd5914f/</url>
    
    <content type="html"><![CDATA[<p>简单几步 <strong>免费白嫖</strong> 部署 <strong>国内在线访问</strong> 的 <strong>ChatGPT3.5&#x2F;4</strong> 网站</p><span id="more"></span><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>可访问外网的工具（没有的话可以走了</li><li><code>GitHub</code>账号</li><li><code>DisCord</code>账号</li></ol><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p><code>fork</code> <a href="https://github.com/hihumanzone/fgpt">大佬的项目</a> 到自己账号<br><img src="https://i.imgtg.com/2023/07/19/OFvudL.png"></p></li><li><p><code>注册并登录</code> <a href="https://zeabur.com/zh-CN">部署平台zeabur</a>，创建新项目然后巴拉巴拉，很简单就不赘述了， <a href="https://zeabur.com/docs/zh-CN">使用文档</a> 在这。<img src="https://zeabur.com/docs/_next/image?url=/docs/_next/static/media/deploy-service-screenshot.81e02f55.png&w=3840&q=75"> 注意这里选择GitHub,验证完后<code>搜索fgpt</code>选择刚才fork的项目。</p></li><li><p>部署设置文档里有详细说明。域名可以自动生成。如图这里需要添加一个变量 <code>OPENAI_API_HOST</code> <strong>:</strong> <code> https://chimeragpt.adventblocks.cc</code> <img src="https://i.imgtg.com/2023/07/19/OFyaFj.png"> 点击部署后网站到此就部署完成了。</p></li><li><p>想要正常使用还得填写这里的 <code>OpenAI API Key</code> <img src="https://i.imgtg.com/2023/07/19/OFyUsq.png"></p></li></ol><ul><li>获取方法 <a href="https://discord.com/invite/t9QvFvzkmV">点击加入此DisCord频道</a></li><li>先去这里验证（点击验证后依次输入图中高亮字符） <img src="https://i.imgtg.com/2023/07/19/OFybac.png"> </li><li>然后在左边选择bot，右侧输入<code>/key get</code><img src="https://i.imgtg.com/2023/07/19/OFyxGM.png"></li><li>把返回的key填入网站，就可以正常使用了！🤩</li></ul><p>成果如图，好多模型啊 (★ ω ★)!<br><img src="https://i.imgtg.com/2023/07/19/OFyzIG.png"></p><p>End</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>joystick</title>
    <link href="/posts/fc43ded0/"/>
    <url>/posts/fc43ded0/</url>
    
    <content type="html"><![CDATA[<p><strong>安卓模拟游戏摇杆，学习android实现自定义view</strong></p><span id="more"></span><p>参考文章:<a href="https://www.jianshu.com/p/96c982d41623">https://www.jianshu.com/p/96c982d41623</a> ，原文部分内容不全。</p><p><code>attrs.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">declare-styleable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;RockerView&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;areaBackground&quot;</span> <span class="hljs-attr">format</span>=<span class="hljs-string">&quot;color|reference&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rockerBackground&quot;</span> <span class="hljs-attr">format</span>=<span class="hljs-string">&quot;color|reference&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rockerRadius&quot;</span> <span class="hljs-attr">format</span>=<span class="hljs-string">&quot;dimension&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rockerScale&quot;</span> <span class="hljs-attr">format</span>=<span class="hljs-string">&quot;float&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rockerSpeedLevel&quot;</span> <span class="hljs-attr">format</span>=<span class="hljs-string">&quot;dimension&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rockerCallBackMode&quot;</span> <span class="hljs-attr">format</span>=<span class="hljs-string">&quot;dimension&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">declare-styleable</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>RockerView.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.content.res.TypedArray;<br><span class="hljs-keyword">import</span> android.graphics.Bitmap;<br><span class="hljs-keyword">import</span> android.graphics.Canvas;<br><span class="hljs-keyword">import</span> android.graphics.Color;<br><span class="hljs-keyword">import</span> android.graphics.Paint;<br><span class="hljs-keyword">import</span> android.graphics.PixelFormat;<br><span class="hljs-keyword">import</span> android.graphics.Point;<br><span class="hljs-keyword">import</span> android.graphics.Rect;<br><span class="hljs-keyword">import</span> android.graphics.drawable.BitmapDrawable;<br><span class="hljs-keyword">import</span> android.graphics.drawable.ColorDrawable;<br><span class="hljs-keyword">import</span> android.graphics.drawable.Drawable;<br><span class="hljs-keyword">import</span> android.graphics.drawable.GradientDrawable;<br><span class="hljs-keyword">import</span> android.util.AttributeSet;<br><span class="hljs-keyword">import</span> android.util.Log;<br><span class="hljs-keyword">import</span> android.view.MotionEvent;<br><span class="hljs-keyword">import</span> android.view.View;<br><br><span class="hljs-keyword">import</span> com.zony.hello.R;<br><br><span class="hljs-keyword">import</span> java.util.logging.Level;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by jinkia on 2016/9/30.</span><br><span class="hljs-comment"> * 摇杆控件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RockerView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">View</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;RockerView&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">400</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">DEFAULT_ROCKER_SCALE</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.5f</span>;<span class="hljs-comment">//默认半径为背景的1/2</span><br><br>    <span class="hljs-keyword">private</span> Paint mAreaBackgroundPaint;<br>    <span class="hljs-keyword">private</span> Paint mRockerPaint;<br><br>    <span class="hljs-keyword">private</span> Point mRockerPosition;<br>    <span class="hljs-keyword">private</span> Point mCenterPoint;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> mAreaRadius;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> mRockerScale;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> mRockerRadius;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">CallBackMode</span> <span class="hljs-variable">mCallBackMode</span> <span class="hljs-operator">=</span> CallBackMode.CALL_BACK_MODE_MOVE;<br>    <span class="hljs-keyword">private</span> OnAngleChangeListener mOnAngleChangeListener;<br>    <span class="hljs-keyword">private</span> OnShakeListener mOnShakeListener;<br>    <span class="hljs-keyword">private</span> OnDistanceLevelListener mOnDistanceLevelListener;<br><br>    <span class="hljs-keyword">private</span> DirectionMode mDirectionMode;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Direction</span> <span class="hljs-variable">tempDirection</span> <span class="hljs-operator">=</span> Direction.DIRECTION_CENTER;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> <span class="hljs-variable">lastDistance</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">hasCall</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> <span class="hljs-variable">baseDistance</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">mDistanceLevel</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<span class="hljs-comment">//分成10分</span><br><br><br>    <span class="hljs-comment">// 角度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">ANGLE_0</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">ANGLE_360</span> <span class="hljs-operator">=</span> <span class="hljs-number">360</span>;<br>    <span class="hljs-comment">// 360°水平方向平分2份的边缘角度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">ANGLE_HORIZONTAL_2D_OF_0P</span> <span class="hljs-operator">=</span> <span class="hljs-number">90</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">ANGLE_HORIZONTAL_2D_OF_1P</span> <span class="hljs-operator">=</span> <span class="hljs-number">270</span>;<br>    <span class="hljs-comment">// 360°垂直方向平分2份的边缘角度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">ANGLE_VERTICAL_2D_OF_0P</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">ANGLE_VERTICAL_2D_OF_1P</span> <span class="hljs-operator">=</span> <span class="hljs-number">180</span>;<br>    <span class="hljs-comment">// 360°平分4份的边缘角度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">ANGLE_4D_OF_0P</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">ANGLE_4D_OF_1P</span> <span class="hljs-operator">=</span> <span class="hljs-number">90</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">ANGLE_4D_OF_2P</span> <span class="hljs-operator">=</span> <span class="hljs-number">180</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">ANGLE_4D_OF_3P</span> <span class="hljs-operator">=</span> <span class="hljs-number">270</span>;<br>    <span class="hljs-comment">// 360°平分4份的边缘角度(旋转45度)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">ANGLE_ROTATE45_4D_OF_0P</span> <span class="hljs-operator">=</span> <span class="hljs-number">45</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">ANGLE_ROTATE45_4D_OF_1P</span> <span class="hljs-operator">=</span> <span class="hljs-number">135</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">ANGLE_ROTATE45_4D_OF_2P</span> <span class="hljs-operator">=</span> <span class="hljs-number">225</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">ANGLE_ROTATE45_4D_OF_3P</span> <span class="hljs-operator">=</span> <span class="hljs-number">315</span>;<br><br>    <span class="hljs-comment">// 360°平分8份的边缘角度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">ANGLE_8D_OF_0P</span> <span class="hljs-operator">=</span> <span class="hljs-number">22.5</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">ANGLE_8D_OF_1P</span> <span class="hljs-operator">=</span> <span class="hljs-number">67.5</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">ANGLE_8D_OF_2P</span> <span class="hljs-operator">=</span> <span class="hljs-number">112.5</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">ANGLE_8D_OF_3P</span> <span class="hljs-operator">=</span> <span class="hljs-number">157.5</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">ANGLE_8D_OF_4P</span> <span class="hljs-operator">=</span> <span class="hljs-number">202.5</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">ANGLE_8D_OF_5P</span> <span class="hljs-operator">=</span> <span class="hljs-number">247.5</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">ANGLE_8D_OF_6P</span> <span class="hljs-operator">=</span> <span class="hljs-number">292.5</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">ANGLE_8D_OF_7P</span> <span class="hljs-operator">=</span> <span class="hljs-number">337.5</span>;<br><br>    <span class="hljs-comment">// 摇杆可移动区域背景</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">AREA_BACKGROUND_MODE_PIC</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">AREA_BACKGROUND_MODE_COLOR</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">AREA_BACKGROUND_MODE_XML</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">AREA_BACKGROUND_MODE_DEFAULT</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">mAreaBackgroundMode</span> <span class="hljs-operator">=</span> AREA_BACKGROUND_MODE_DEFAULT;<br>    <span class="hljs-keyword">private</span> Bitmap mAreaBitmap;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> mAreaColor;<br>    <span class="hljs-comment">// 摇杆背景</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">ROCKER_BACKGROUND_MODE_PIC</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">ROCKER_BACKGROUND_MODE_COLOR</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">ROCKER_BACKGROUND_MODE_XML</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">ROCKER_BACKGROUND_MODE_DEFAULT</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">mRockerBackgroundMode</span> <span class="hljs-operator">=</span> ROCKER_BACKGROUND_MODE_DEFAULT;<br>    <span class="hljs-keyword">private</span> Bitmap mRockerBitmap;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> mRockerColor;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RockerView</span><span class="hljs-params">(Context context, AttributeSet attrs)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, attrs);<br><br>        <span class="hljs-comment">// 获取自定义属性</span><br>        initAttribute(context, attrs);<br><br>        <span class="hljs-keyword">if</span> (isInEditMode()) &#123;<br>        &#125;<br><br>        <span class="hljs-comment">// 移动区域画笔</span><br>        mAreaBackgroundPaint = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Paint</span>();<br>        mAreaBackgroundPaint.setAntiAlias(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">// 摇杆画笔</span><br>        mRockerPaint = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Paint</span>();<br>        mRockerPaint.setAntiAlias(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">// 中心点</span><br>        mCenterPoint = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>();<br>        <span class="hljs-comment">// 摇杆位置</span><br>        mRockerPosition = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取属性</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context context</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> attrs   attrs</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initAttribute</span><span class="hljs-params">(Context context, AttributeSet attrs)</span> &#123;<br>        <span class="hljs-type">TypedArray</span> <span class="hljs-variable">typedArray</span> <span class="hljs-operator">=</span> context.obtainStyledAttributes(attrs, R.styleable.RockerView);<br><br>        <span class="hljs-comment">// 可移动区域背景</span><br>        <span class="hljs-type">Drawable</span> <span class="hljs-variable">areaBackground</span> <span class="hljs-operator">=</span> typedArray.getDrawable(R.styleable.RockerView_areaBackground);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != areaBackground) &#123;<br>            <span class="hljs-comment">// 设置了背景</span><br>            <span class="hljs-keyword">if</span> (areaBackground <span class="hljs-keyword">instanceof</span> BitmapDrawable) &#123;<br>                <span class="hljs-comment">// 设置了一张图片</span><br>                mAreaBitmap = ((BitmapDrawable) areaBackground).getBitmap();<br>                mAreaBackgroundMode = AREA_BACKGROUND_MODE_PIC;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (areaBackground <span class="hljs-keyword">instanceof</span> GradientDrawable) &#123;<br>                <span class="hljs-comment">// XML</span><br>                mAreaBitmap = drawable2Bitmap(areaBackground);<br>                mAreaBackgroundMode = AREA_BACKGROUND_MODE_XML;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (areaBackground <span class="hljs-keyword">instanceof</span> ColorDrawable) &#123;<br>                <span class="hljs-comment">// 色值</span><br>                mAreaColor = ((ColorDrawable) areaBackground).getColor();<br>                mAreaBackgroundMode = AREA_BACKGROUND_MODE_COLOR;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 其他形式</span><br>                mAreaBackgroundMode = AREA_BACKGROUND_MODE_DEFAULT;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 没有设置背景</span><br>            mAreaBackgroundMode = AREA_BACKGROUND_MODE_DEFAULT;<br>        &#125;<br>        <span class="hljs-comment">// 摇杆背景</span><br>        <span class="hljs-type">Drawable</span> <span class="hljs-variable">rockerBackground</span> <span class="hljs-operator">=</span> typedArray.getDrawable(R.styleable.RockerView_rockerBackground);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != rockerBackground) &#123;<br>            <span class="hljs-comment">// 设置了摇杆背景</span><br>            <span class="hljs-keyword">if</span> (rockerBackground <span class="hljs-keyword">instanceof</span> BitmapDrawable) &#123;<br>                <span class="hljs-comment">// 图片</span><br>                mRockerBitmap = ((BitmapDrawable) rockerBackground).getBitmap();<br>                mRockerBackgroundMode = ROCKER_BACKGROUND_MODE_PIC;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rockerBackground <span class="hljs-keyword">instanceof</span> GradientDrawable) &#123;<br>                <span class="hljs-comment">// XML</span><br>                mRockerBitmap = drawable2Bitmap(rockerBackground);<br>                mRockerBackgroundMode = ROCKER_BACKGROUND_MODE_XML;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rockerBackground <span class="hljs-keyword">instanceof</span> ColorDrawable) &#123;<br>                <span class="hljs-comment">// 色值</span><br>                mRockerColor = ((ColorDrawable) rockerBackground).getColor();<br>                mRockerBackgroundMode = ROCKER_BACKGROUND_MODE_COLOR;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 其他形式</span><br>                mRockerBackgroundMode = ROCKER_BACKGROUND_MODE_DEFAULT;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 没有设置摇杆背景</span><br>            mRockerBackgroundMode = ROCKER_BACKGROUND_MODE_DEFAULT;<br>        &#125;<br><br>        <span class="hljs-comment">// 摇杆半径</span><br>        mRockerScale = typedArray.getFloat(R.styleable.RockerView_rockerScale, DEFAULT_ROCKER_SCALE);<br>        <span class="hljs-comment">//距离级别</span><br>        mDistanceLevel = typedArray.getInt(R.styleable.RockerView_rockerSpeedLevel, <span class="hljs-number">10</span>);<br>        <span class="hljs-comment">//回调模式</span><br>        mCallBackMode = getCallBackMode(typedArray.getInt(R.styleable.RockerView_rockerCallBackMode, <span class="hljs-number">0</span>));<br>        typedArray.recycle();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMeasure</span><span class="hljs-params">(<span class="hljs-type">int</span> widthMeasureSpec, <span class="hljs-type">int</span> heightMeasureSpec)</span> &#123;<br>        <span class="hljs-type">int</span> measureWidth, measureHeight;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">widthMode</span> <span class="hljs-operator">=</span> MeasureSpec.getMode(widthMeasureSpec);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">heightMode</span> <span class="hljs-operator">=</span> MeasureSpec.getMode(heightMeasureSpec);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">widthSize</span> <span class="hljs-operator">=</span> MeasureSpec.getSize(widthMeasureSpec);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">heightSize</span> <span class="hljs-operator">=</span> MeasureSpec.getSize(heightMeasureSpec);<br><br>        <span class="hljs-keyword">if</span> (widthMode == MeasureSpec.EXACTLY) &#123;<br>            <span class="hljs-comment">// 具体的值和match_parent</span><br>            measureWidth = widthSize;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// wrap_content</span><br>            measureWidth = DEFAULT_SIZE;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (heightMode == MeasureSpec.EXACTLY) &#123;<br>            measureHeight = heightSize;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            measureHeight = DEFAULT_SIZE;<br>        &#125;<br>        setMeasuredDimension(measureWidth, measureHeight);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDraw</span><span class="hljs-params">(Canvas canvas)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDraw(canvas);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">measuredWidth</span> <span class="hljs-operator">=</span> getMeasuredWidth();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">measuredHeight</span> <span class="hljs-operator">=</span> getMeasuredHeight();<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">cx</span> <span class="hljs-operator">=</span> measuredWidth / <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cy</span> <span class="hljs-operator">=</span> measuredHeight / <span class="hljs-number">2</span>;<br><br>        <span class="hljs-comment">// 中心点</span><br>        mCenterPoint.set(cx, cy);<br>        <span class="hljs-comment">// 可移动区域的半径</span><br>        mAreaRadius = (measuredWidth &lt;= measuredHeight) ? (<span class="hljs-type">int</span>) (cx / (mRockerScale + <span class="hljs-number">1</span>)) : (<span class="hljs-type">int</span>) (cy / (mRockerScale + <span class="hljs-number">1</span>));<br>        mRockerRadius = (<span class="hljs-type">int</span>) (mAreaRadius * mRockerScale);<br>        <span class="hljs-comment">// 摇杆位置</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == mRockerPosition.x || <span class="hljs-number">0</span> == mRockerPosition.y) &#123;<br>            mRockerPosition.set(mCenterPoint.x, mCenterPoint.y);<br>        &#125;<br><br>        <span class="hljs-comment">// 画可移动区域</span><br>        <span class="hljs-keyword">if</span> (AREA_BACKGROUND_MODE_PIC == mAreaBackgroundMode || AREA_BACKGROUND_MODE_XML == mAreaBackgroundMode) &#123;<br>            <span class="hljs-comment">// 图片</span><br>            <span class="hljs-type">Rect</span> <span class="hljs-variable">src</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, mAreaBitmap.getWidth(), mAreaBitmap.getHeight());<br>            <span class="hljs-type">Rect</span> <span class="hljs-variable">dst</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rect</span>(mCenterPoint.x - mAreaRadius, mCenterPoint.y - mAreaRadius, mCenterPoint.x + mAreaRadius, mCenterPoint.y + mAreaRadius);<br>            canvas.drawBitmap(mAreaBitmap, src, dst, mAreaBackgroundPaint);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (AREA_BACKGROUND_MODE_COLOR == mAreaBackgroundMode) &#123;<br>            <span class="hljs-comment">// 色值</span><br>            mAreaBackgroundPaint.setColor(mAreaColor);<br>            canvas.drawCircle(mCenterPoint.x, mCenterPoint.y, mAreaRadius, mAreaBackgroundPaint);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 其他或者未设置</span><br>            mAreaBackgroundPaint.setColor(Color.GRAY);<br>            canvas.drawCircle(mCenterPoint.x, mCenterPoint.y, mAreaRadius, mAreaBackgroundPaint);<br>        &#125;<br><br>        <span class="hljs-comment">// 画摇杆</span><br>        <span class="hljs-keyword">if</span> (ROCKER_BACKGROUND_MODE_PIC == mRockerBackgroundMode || ROCKER_BACKGROUND_MODE_XML == mRockerBackgroundMode) &#123;<br>            <span class="hljs-comment">// 图片</span><br>            <span class="hljs-type">Rect</span> <span class="hljs-variable">src</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, mRockerBitmap.getWidth(), mRockerBitmap.getHeight());<br>            <span class="hljs-type">Rect</span> <span class="hljs-variable">dst</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rect</span>(mRockerPosition.x - mRockerRadius, mRockerPosition.y - mRockerRadius, mRockerPosition.x + mRockerRadius, mRockerPosition.y + mRockerRadius);<br>            canvas.drawBitmap(mRockerBitmap, src, dst, mRockerPaint);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ROCKER_BACKGROUND_MODE_COLOR == mRockerBackgroundMode) &#123;<br>            <span class="hljs-comment">// 色值</span><br>            mRockerPaint.setColor(mRockerColor);<br>            canvas.drawCircle(mRockerPosition.x, mRockerPosition.y, mRockerRadius, mRockerPaint);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 其他或者未设置</span><br>            mRockerPaint.setColor(Color.RED);<br>            canvas.drawCircle(mRockerPosition.x, mRockerPosition.y, mRockerRadius, mRockerPaint);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onTouchEvent</span><span class="hljs-params">(MotionEvent event)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (event.getAction()) &#123;<br>            <span class="hljs-keyword">case</span> MotionEvent.ACTION_DOWN:<span class="hljs-comment">// 按下</span><br>                <span class="hljs-comment">// 回调 开始</span><br>                callBackStart();<br>            <span class="hljs-keyword">case</span> MotionEvent.ACTION_MOVE:<span class="hljs-comment">// 移动</span><br>                <span class="hljs-type">float</span> <span class="hljs-variable">moveX</span> <span class="hljs-operator">=</span> event.getX();<br>                <span class="hljs-type">float</span> <span class="hljs-variable">moveY</span> <span class="hljs-operator">=</span> event.getY();<br>                baseDistance = mAreaRadius + <span class="hljs-number">2</span>;<br>                Log.d(<span class="hljs-string">&quot;baseDistance&quot;</span>, baseDistance + <span class="hljs-string">&quot;&quot;</span>);<br>                mRockerPosition = getRockerPositionPoint(mCenterPoint, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>((<span class="hljs-type">int</span>) moveX, (<span class="hljs-type">int</span>) moveY), mAreaRadius + mRockerRadius, mRockerRadius);<br>                moveRocker(mRockerPosition.x, mRockerPosition.y);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> MotionEvent.ACTION_UP:<span class="hljs-comment">// 抬起</span><br>            <span class="hljs-keyword">case</span> MotionEvent.ACTION_CANCEL:<span class="hljs-comment">// 移出区域</span><br>                <span class="hljs-comment">// 回调 结束</span><br>                callBackFinish();<br>                <span class="hljs-keyword">if</span> (mOnShakeListener != <span class="hljs-literal">null</span>) &#123;<br>                    mOnShakeListener.direction(Direction.DIRECTION_CENTER);<br>                &#125;<br>                <span class="hljs-type">float</span> <span class="hljs-variable">upX</span> <span class="hljs-operator">=</span> event.getX();<br>                <span class="hljs-type">float</span> <span class="hljs-variable">upY</span> <span class="hljs-operator">=</span> event.getY();<br>                moveRocker(mCenterPoint.x, mCenterPoint.y);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取摇杆实际要显示的位置（点）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> centerPoint  中心点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> touchPoint   触摸点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> regionRadius 摇杆可活动区域半径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rockerRadius 摇杆半径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 摇杆实际显示的位置（点）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Point <span class="hljs-title function_">getRockerPositionPoint</span><span class="hljs-params">(Point centerPoint, Point touchPoint, <span class="hljs-type">float</span> regionRadius, <span class="hljs-type">float</span> rockerRadius)</span> &#123;<br>        <span class="hljs-comment">// 两点在X轴的距离</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">lenX</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>) (touchPoint.x - centerPoint.x);<br>        <span class="hljs-comment">// 两点在Y轴距离</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">lenY</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>) (touchPoint.y - centerPoint.y);<br>        <span class="hljs-comment">// 两点距离</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">lenXY</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>) Math.sqrt((<span class="hljs-type">double</span>) (lenX * lenX + lenY * lenY));<br>        <span class="hljs-comment">// 计算弧度</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">radian</span> <span class="hljs-operator">=</span> Math.acos(lenX / lenXY) * (touchPoint.y &lt; centerPoint.y ? -<span class="hljs-number">1</span> : <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 计算角度</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">angle</span> <span class="hljs-operator">=</span> radian2Angle(radian);<br><br>        <span class="hljs-keyword">if</span> (lenXY + rockerRadius &lt;= regionRadius) &#123; <span class="hljs-comment">// 触摸位置在可活动范围内</span><br>            <span class="hljs-comment">// 回调 返回参数</span><br>            callBack(angle, (<span class="hljs-type">int</span>) lenXY);<br>            <span class="hljs-keyword">return</span> touchPoint;<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 触摸位置在可活动范围以外</span><br>            <span class="hljs-comment">// 计算要显示的位置</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">showPointX</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (centerPoint.x + (regionRadius - rockerRadius) * Math.cos(radian));<br>            <span class="hljs-type">int</span> <span class="hljs-variable">showPointY</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (centerPoint.y + (regionRadius - rockerRadius) * Math.sin(radian));<br><br>            callBack(angle, (<span class="hljs-type">int</span>) Math.sqrt((showPointX - centerPoint.x) * (showPointX - centerPoint.x) + (showPointY - centerPoint.y) * (showPointY - centerPoint.y)));<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(showPointX, showPointY);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 移动摇杆到指定位置</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> x x坐标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> y y坐标</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">moveRocker</span><span class="hljs-params">(<span class="hljs-type">float</span> x, <span class="hljs-type">float</span> y)</span> &#123;<br>        mRockerPosition.set((<span class="hljs-type">int</span>) x, (<span class="hljs-type">int</span>) y);<br>        invalidate();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 弧度转角度</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> radian 弧度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 角度[0, 360)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> <span class="hljs-title function_">radian2Angle</span><span class="hljs-params">(<span class="hljs-type">double</span> radian)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> Math.round(radian / Math.PI * <span class="hljs-number">180</span>);<br>        <span class="hljs-keyword">return</span> tmp &gt;= <span class="hljs-number">0</span> ? tmp : <span class="hljs-number">360</span> + tmp;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Drawable 转 Bitmap</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> drawable Drawable</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Bitmap</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Bitmap <span class="hljs-title function_">drawable2Bitmap</span><span class="hljs-params">(Drawable drawable)</span> &#123;<br>        <span class="hljs-comment">// 取 drawable 的长宽</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">width</span> <span class="hljs-operator">=</span> drawable.getIntrinsicWidth();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> drawable.getIntrinsicHeight();<br>        <span class="hljs-comment">// 取 drawable 的颜色格式</span><br>        Bitmap.<span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565;<br>        <span class="hljs-comment">// 建立对应 bitmap</span><br>        <span class="hljs-type">Bitmap</span> <span class="hljs-variable">bitmap</span> <span class="hljs-operator">=</span> Bitmap.createBitmap(width, height, config);<br>        <span class="hljs-type">Canvas</span> <span class="hljs-variable">canvas</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Canvas</span>(bitmap);<br>        drawable.setBounds(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height);<br>        drawable.draw(canvas);<br>        <span class="hljs-keyword">return</span> bitmap;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 回调</span><br><span class="hljs-comment">     * 开始</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">callBackStart</span><span class="hljs-params">()</span> &#123;<br>        tempDirection = Direction.DIRECTION_CENTER;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != mOnAngleChangeListener) &#123;<br>            mOnAngleChangeListener.onStart();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != mOnShakeListener) &#123;<br>            mOnShakeListener.onStart();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 回调</span><br><span class="hljs-comment">     * 返回参数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> angle 摇动角度</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">callBack</span><span class="hljs-params">(<span class="hljs-type">double</span> angle, <span class="hljs-type">float</span> distance)</span> &#123;<br>        Log.d(<span class="hljs-string">&quot;distance&quot;</span>, distance + <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">if</span> (Math.abs(distance - lastDistance) &gt;= (baseDistance / mDistanceLevel)) &#123;<br>            lastDistance = distance;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != mOnDistanceLevelListener) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">level</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (distance / (baseDistance / mDistanceLevel));<br>                mOnDistanceLevelListener.onDistanceLevel(level);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != mOnAngleChangeListener) &#123;<br>            mOnAngleChangeListener.angle(angle);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != mOnShakeListener) &#123;<br>            <span class="hljs-keyword">if</span> (CallBackMode.CALL_BACK_MODE_MOVE == mCallBackMode) &#123;<br>                <span class="hljs-keyword">switch</span> (mDirectionMode) &#123;<br>                    <span class="hljs-keyword">case</span> DIRECTION_2_HORIZONTAL:<span class="hljs-comment">// 左右方向</span><br>                        <span class="hljs-keyword">if</span> (ANGLE_0 &lt;= angle &amp;&amp; ANGLE_HORIZONTAL_2D_OF_0P &gt; angle || ANGLE_HORIZONTAL_2D_OF_1P &lt;= angle &amp;&amp; ANGLE_360 &gt; angle) &#123;<br>                            <span class="hljs-comment">// 右</span><br>                            mOnShakeListener.direction(Direction.DIRECTION_RIGHT);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_HORIZONTAL_2D_OF_0P &lt;= angle &amp;&amp; ANGLE_HORIZONTAL_2D_OF_1P &gt; angle) &#123;<br>                            <span class="hljs-comment">// 左</span><br>                            mOnShakeListener.direction(Direction.DIRECTION_LEFT);<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> DIRECTION_2_VERTICAL:<span class="hljs-comment">// 上下方向</span><br>                        <span class="hljs-keyword">if</span> (ANGLE_VERTICAL_2D_OF_0P &lt;= angle &amp;&amp; ANGLE_VERTICAL_2D_OF_1P &gt; angle) &#123;<br>                            <span class="hljs-comment">// 下</span><br>                            mOnShakeListener.direction(Direction.DIRECTION_DOWN);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_VERTICAL_2D_OF_1P &lt;= angle &amp;&amp; ANGLE_360 &gt; angle) &#123;<br>                            <span class="hljs-comment">// 上</span><br>                            mOnShakeListener.direction(Direction.DIRECTION_UP);<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> DIRECTION_4_ROTATE_0:<span class="hljs-comment">// 四个方向</span><br>                        <span class="hljs-keyword">if</span> (ANGLE_4D_OF_0P &lt;= angle &amp;&amp; ANGLE_4D_OF_1P &gt; angle) &#123;<br>                            <span class="hljs-comment">// 右下</span><br>                            mOnShakeListener.direction(Direction.DIRECTION_DOWN_RIGHT);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_4D_OF_1P &lt;= angle &amp;&amp; ANGLE_4D_OF_2P &gt; angle) &#123;<br>                            <span class="hljs-comment">// 左下</span><br>                            mOnShakeListener.direction(Direction.DIRECTION_DOWN_LEFT);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_4D_OF_2P &lt;= angle &amp;&amp; ANGLE_4D_OF_3P &gt; angle) &#123;<br>                            <span class="hljs-comment">// 左上</span><br>                            mOnShakeListener.direction(Direction.DIRECTION_UP_LEFT);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_4D_OF_3P &lt;= angle &amp;&amp; ANGLE_360 &gt; angle) &#123;<br>                            <span class="hljs-comment">// 右上</span><br>                            mOnShakeListener.direction(Direction.DIRECTION_UP_RIGHT);<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> DIRECTION_4_ROTATE_45:<span class="hljs-comment">// 四个方向 旋转45度</span><br>                        <span class="hljs-keyword">if</span> (ANGLE_0 &lt;= angle &amp;&amp; ANGLE_ROTATE45_4D_OF_0P &gt; angle || ANGLE_ROTATE45_4D_OF_3P &lt;= angle &amp;&amp; ANGLE_360 &gt; angle) &#123;<br>                            <span class="hljs-comment">// 右</span><br>                            mOnShakeListener.direction(Direction.DIRECTION_RIGHT);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_ROTATE45_4D_OF_0P &lt;= angle &amp;&amp; ANGLE_ROTATE45_4D_OF_1P &gt; angle) &#123;<br>                            <span class="hljs-comment">// 下</span><br>                            mOnShakeListener.direction(Direction.DIRECTION_DOWN);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_ROTATE45_4D_OF_1P &lt;= angle &amp;&amp; ANGLE_ROTATE45_4D_OF_2P &gt; angle) &#123;<br>                            <span class="hljs-comment">// 左</span><br>                            mOnShakeListener.direction(Direction.DIRECTION_LEFT);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_ROTATE45_4D_OF_2P &lt;= angle &amp;&amp; ANGLE_ROTATE45_4D_OF_3P &gt; angle) &#123;<br>                            <span class="hljs-comment">// 上</span><br>                            mOnShakeListener.direction(Direction.DIRECTION_UP);<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> DIRECTION_8:<span class="hljs-comment">// 八个方向</span><br>                        <span class="hljs-keyword">if</span> (ANGLE_0 &lt;= angle &amp;&amp; ANGLE_8D_OF_0P &gt; angle || ANGLE_8D_OF_7P &lt;= angle &amp;&amp; ANGLE_360 &gt; angle) &#123;<br>                            <span class="hljs-comment">// 右</span><br>                            mOnShakeListener.direction(Direction.DIRECTION_RIGHT);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_8D_OF_0P &lt;= angle &amp;&amp; ANGLE_8D_OF_1P &gt; angle) &#123;<br>                            <span class="hljs-comment">// 右下</span><br>                            mOnShakeListener.direction(Direction.DIRECTION_DOWN_RIGHT);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_8D_OF_1P &lt;= angle &amp;&amp; ANGLE_8D_OF_2P &gt; angle) &#123;<br>                            <span class="hljs-comment">// 下</span><br>                            mOnShakeListener.direction(Direction.DIRECTION_DOWN);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_8D_OF_2P &lt;= angle &amp;&amp; ANGLE_8D_OF_3P &gt; angle) &#123;<br>                            <span class="hljs-comment">// 左下</span><br>                            mOnShakeListener.direction(Direction.DIRECTION_DOWN_LEFT);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_8D_OF_3P &lt;= angle &amp;&amp; ANGLE_8D_OF_4P &gt; angle) &#123;<br>                            <span class="hljs-comment">// 左</span><br>                            mOnShakeListener.direction(Direction.DIRECTION_LEFT);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_8D_OF_4P &lt;= angle &amp;&amp; ANGLE_8D_OF_5P &gt; angle) &#123;<br>                            <span class="hljs-comment">// 左上</span><br>                            mOnShakeListener.direction(Direction.DIRECTION_UP_LEFT);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_8D_OF_5P &lt;= angle &amp;&amp; ANGLE_8D_OF_6P &gt; angle) &#123;<br>                            <span class="hljs-comment">// 上</span><br>                            mOnShakeListener.direction(Direction.DIRECTION_UP);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_8D_OF_6P &lt;= angle &amp;&amp; ANGLE_8D_OF_7P &gt; angle) &#123;<br>                            <span class="hljs-comment">// 右上</span><br>                            mOnShakeListener.direction(Direction.DIRECTION_UP_RIGHT);<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">default</span>:<br>                        <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (CallBackMode.CALL_BACK_MODE_STATE_CHANGE == mCallBackMode) &#123;<br>                <span class="hljs-keyword">switch</span> (mDirectionMode) &#123;<br>                    <span class="hljs-keyword">case</span> DIRECTION_2_HORIZONTAL:<span class="hljs-comment">// 左右方向</span><br>                        <span class="hljs-keyword">if</span> ((ANGLE_0 &lt;= angle &amp;&amp; ANGLE_HORIZONTAL_2D_OF_0P &gt; angle || ANGLE_HORIZONTAL_2D_OF_1P &lt;= angle &amp;&amp; ANGLE_360 &gt; angle) &amp;&amp; tempDirection != Direction.DIRECTION_RIGHT) &#123;<br>                            <span class="hljs-comment">// 右</span><br>                            tempDirection = Direction.DIRECTION_RIGHT;<br>                            mOnShakeListener.direction(Direction.DIRECTION_RIGHT);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_HORIZONTAL_2D_OF_0P &lt;= angle &amp;&amp; ANGLE_HORIZONTAL_2D_OF_1P &gt; angle &amp;&amp; tempDirection != Direction.DIRECTION_LEFT) &#123;<br>                            <span class="hljs-comment">// 左</span><br>                            tempDirection = Direction.DIRECTION_LEFT;<br>                            mOnShakeListener.direction(Direction.DIRECTION_LEFT);<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> DIRECTION_2_VERTICAL:<span class="hljs-comment">// 上下方向</span><br>                        <span class="hljs-keyword">if</span> (ANGLE_VERTICAL_2D_OF_0P &lt;= angle &amp;&amp; ANGLE_VERTICAL_2D_OF_1P &gt; angle &amp;&amp; tempDirection != Direction.DIRECTION_DOWN) &#123;<br>                            <span class="hljs-comment">// 下</span><br>                            tempDirection = Direction.DIRECTION_DOWN;<br>                            mOnShakeListener.direction(Direction.DIRECTION_DOWN);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_VERTICAL_2D_OF_1P &lt;= angle &amp;&amp; ANGLE_360 &gt; angle &amp;&amp; tempDirection != Direction.DIRECTION_UP) &#123;<br>                            <span class="hljs-comment">// 上</span><br>                            tempDirection = Direction.DIRECTION_UP;<br>                            mOnShakeListener.direction(Direction.DIRECTION_UP);<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> DIRECTION_4_ROTATE_0:<span class="hljs-comment">// 四个方向</span><br>                        <span class="hljs-keyword">if</span> (ANGLE_4D_OF_0P &lt;= angle &amp;&amp; ANGLE_4D_OF_1P &gt; angle &amp;&amp; tempDirection != Direction.DIRECTION_DOWN_RIGHT) &#123;<br>                            <span class="hljs-comment">// 右下</span><br>                            tempDirection = Direction.DIRECTION_DOWN_RIGHT;<br>                            mOnShakeListener.direction(Direction.DIRECTION_DOWN_RIGHT);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_4D_OF_1P &lt;= angle &amp;&amp; ANGLE_4D_OF_2P &gt; angle &amp;&amp; tempDirection != Direction.DIRECTION_DOWN_LEFT) &#123;<br>                            <span class="hljs-comment">// 左下</span><br>                            tempDirection = Direction.DIRECTION_DOWN_LEFT;<br>                            mOnShakeListener.direction(Direction.DIRECTION_DOWN_LEFT);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_4D_OF_2P &lt;= angle &amp;&amp; ANGLE_4D_OF_3P &gt; angle &amp;&amp; tempDirection != Direction.DIRECTION_UP_LEFT) &#123;<br>                            <span class="hljs-comment">// 左上</span><br>                            tempDirection = Direction.DIRECTION_UP_LEFT;<br>                            mOnShakeListener.direction(Direction.DIRECTION_UP_LEFT);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_4D_OF_3P &lt;= angle &amp;&amp; ANGLE_360 &gt; angle &amp;&amp; tempDirection != Direction.DIRECTION_UP_RIGHT) &#123;<br>                            <span class="hljs-comment">// 右上</span><br>                            tempDirection = Direction.DIRECTION_UP_RIGHT;<br>                            mOnShakeListener.direction(Direction.DIRECTION_UP_RIGHT);<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> DIRECTION_4_ROTATE_45:<span class="hljs-comment">// 四个方向 旋转45度</span><br>                        <span class="hljs-keyword">if</span> ((ANGLE_0 &lt;= angle &amp;&amp; ANGLE_ROTATE45_4D_OF_0P &gt; angle || ANGLE_ROTATE45_4D_OF_3P &lt;= angle &amp;&amp; ANGLE_360 &gt; angle) &amp;&amp; tempDirection != Direction.DIRECTION_RIGHT) &#123;<br>                            <span class="hljs-comment">// 右</span><br>                            tempDirection = Direction.DIRECTION_RIGHT;<br>                            mOnShakeListener.direction(Direction.DIRECTION_RIGHT);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_ROTATE45_4D_OF_0P &lt;= angle &amp;&amp; ANGLE_ROTATE45_4D_OF_1P &gt; angle &amp;&amp; tempDirection != Direction.DIRECTION_DOWN) &#123;<br>                            <span class="hljs-comment">// 下</span><br>                            tempDirection = Direction.DIRECTION_DOWN;<br>                            mOnShakeListener.direction(Direction.DIRECTION_DOWN);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_ROTATE45_4D_OF_1P &lt;= angle &amp;&amp; ANGLE_ROTATE45_4D_OF_2P &gt; angle &amp;&amp; tempDirection != Direction.DIRECTION_LEFT) &#123;<br>                            <span class="hljs-comment">// 左</span><br>                            tempDirection = Direction.DIRECTION_LEFT;<br>                            mOnShakeListener.direction(Direction.DIRECTION_LEFT);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_ROTATE45_4D_OF_2P &lt;= angle &amp;&amp; ANGLE_ROTATE45_4D_OF_3P &gt; angle &amp;&amp; tempDirection != Direction.DIRECTION_UP) &#123;<br>                            <span class="hljs-comment">// 上</span><br>                            tempDirection = Direction.DIRECTION_UP;<br>                            mOnShakeListener.direction(Direction.DIRECTION_UP);<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> DIRECTION_8:<span class="hljs-comment">// 八个方向</span><br>                        <span class="hljs-keyword">if</span> ((ANGLE_0 &lt;= angle &amp;&amp; ANGLE_8D_OF_0P &gt; angle || ANGLE_8D_OF_7P &lt;= angle &amp;&amp; ANGLE_360 &gt; angle) &amp;&amp; tempDirection != Direction.DIRECTION_RIGHT) &#123;<br>                            <span class="hljs-comment">// 右</span><br>                            tempDirection = Direction.DIRECTION_RIGHT;<br>                            mOnShakeListener.direction(Direction.DIRECTION_RIGHT);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_8D_OF_0P &lt;= angle &amp;&amp; ANGLE_8D_OF_1P &gt; angle &amp;&amp; tempDirection != Direction.DIRECTION_DOWN_RIGHT) &#123;<br>                            <span class="hljs-comment">// 右下</span><br>                            tempDirection = Direction.DIRECTION_DOWN_RIGHT;<br>                            mOnShakeListener.direction(Direction.DIRECTION_DOWN_RIGHT);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_8D_OF_1P &lt;= angle &amp;&amp; ANGLE_8D_OF_2P &gt; angle &amp;&amp; tempDirection != Direction.DIRECTION_DOWN) &#123;<br>                            <span class="hljs-comment">// 下</span><br>                            tempDirection = Direction.DIRECTION_DOWN;<br>                            mOnShakeListener.direction(Direction.DIRECTION_DOWN);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_8D_OF_2P &lt;= angle &amp;&amp; ANGLE_8D_OF_3P &gt; angle &amp;&amp; tempDirection != Direction.DIRECTION_DOWN_LEFT) &#123;<br>                            <span class="hljs-comment">// 左下</span><br>                            tempDirection = Direction.DIRECTION_DOWN_LEFT;<br>                            mOnShakeListener.direction(Direction.DIRECTION_DOWN_LEFT);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_8D_OF_3P &lt;= angle &amp;&amp; ANGLE_8D_OF_4P &gt; angle &amp;&amp; tempDirection != Direction.DIRECTION_LEFT) &#123;<br>                            <span class="hljs-comment">// 左</span><br>                            tempDirection = Direction.DIRECTION_LEFT;<br>                            mOnShakeListener.direction(Direction.DIRECTION_LEFT);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_8D_OF_4P &lt;= angle &amp;&amp; ANGLE_8D_OF_5P &gt; angle &amp;&amp; tempDirection != Direction.DIRECTION_UP_LEFT) &#123;<br>                            <span class="hljs-comment">// 左上</span><br>                            tempDirection = Direction.DIRECTION_UP_LEFT;<br>                            mOnShakeListener.direction(Direction.DIRECTION_UP_LEFT);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_8D_OF_5P &lt;= angle &amp;&amp; ANGLE_8D_OF_6P &gt; angle &amp;&amp; tempDirection != Direction.DIRECTION_UP) &#123;<br>                            <span class="hljs-comment">// 上</span><br>                            tempDirection = Direction.DIRECTION_UP;<br>                            mOnShakeListener.direction(Direction.DIRECTION_UP);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ANGLE_8D_OF_6P &lt;= angle &amp;&amp; ANGLE_8D_OF_7P &gt; angle &amp;&amp; tempDirection != Direction.DIRECTION_UP_RIGHT) &#123;<br>                            <span class="hljs-comment">// 右上</span><br>                            tempDirection = Direction.DIRECTION_UP_RIGHT;<br>                            mOnShakeListener.direction(Direction.DIRECTION_UP_RIGHT);<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">default</span>:<br>                        <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 回调</span><br><span class="hljs-comment">     * 结束</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">callBackFinish</span><span class="hljs-params">()</span> &#123;<br>        tempDirection = Direction.DIRECTION_CENTER;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != mOnAngleChangeListener) &#123;<br>            mOnAngleChangeListener.onFinish();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != mOnShakeListener) &#123;<br>            mOnShakeListener.onFinish();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 回调模式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">CallBackMode</span> &#123;<br>        <span class="hljs-comment">// 有移动就立刻回调</span><br>        CALL_BACK_MODE_MOVE,<br>        <span class="hljs-comment">// 只有状态变化的时候才回调</span><br>        CALL_BACK_MODE_STATE_CHANGE,<br>        <span class="hljs-comment">//只有状态变化或者距离变化的时候才回调</span><br>        CALL_BACK_MODE_STATE_DISTANCE_CHANGE<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置回调模式</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mode 回调模式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCallBackMode</span><span class="hljs-params">(CallBackMode mode)</span> &#123;<br>        mCallBackMode = mode;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 摇杆支持几个方向</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">DirectionMode</span> &#123;<br>        DIRECTION_2_HORIZONTAL,<span class="hljs-comment">// 横向 左右两个方向</span><br>        DIRECTION_2_VERTICAL, <span class="hljs-comment">// 纵向 上下两个方向</span><br>        DIRECTION_4_ROTATE_0, <span class="hljs-comment">// 四个方向</span><br>        DIRECTION_4_ROTATE_45, <span class="hljs-comment">// 四个方向 旋转45度</span><br>        DIRECTION_8 <span class="hljs-comment">// 八个方向</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 方向</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Direction</span> &#123;<br>        DIRECTION_LEFT, <span class="hljs-comment">// 左</span><br>        DIRECTION_RIGHT, <span class="hljs-comment">// 右</span><br>        DIRECTION_UP, <span class="hljs-comment">// 上</span><br>        DIRECTION_DOWN, <span class="hljs-comment">// 下</span><br>        DIRECTION_UP_LEFT, <span class="hljs-comment">// 左上</span><br>        DIRECTION_UP_RIGHT, <span class="hljs-comment">// 右上</span><br>        DIRECTION_DOWN_LEFT, <span class="hljs-comment">// 左下</span><br>        DIRECTION_DOWN_RIGHT, <span class="hljs-comment">// 右下</span><br>        DIRECTION_CENTER <span class="hljs-comment">// 中间</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加摇杆摇动角度的监听</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> listener 回调接口</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOnAngleChangeListener</span><span class="hljs-params">(OnAngleChangeListener listener)</span> &#123;<br>        mOnAngleChangeListener = listener;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加摇动的监听</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> directionMode 监听的方向</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> listener      回调</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOnShakeListener</span><span class="hljs-params">(DirectionMode directionMode, OnShakeListener listener)</span> &#123;<br>        mDirectionMode = directionMode;<br>        mOnShakeListener = listener;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加摇动的距离变化</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOnDistanceLevelListener</span><span class="hljs-params">(OnDistanceLevelListener listener)</span> &#123;<br>        mOnDistanceLevelListener = listener;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 摇动方向监听接口</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OnShakeListener</span> &#123;<br>        <span class="hljs-comment">// 开始</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStart</span><span class="hljs-params">()</span>;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 摇动方向</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> direction 方向</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">direction</span><span class="hljs-params">(Direction direction)</span>;<br><br>        <span class="hljs-comment">// 结束</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">onFinish</span><span class="hljs-params">()</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 摇动角度的监听接口</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OnAngleChangeListener</span> &#123;<br>        <span class="hljs-comment">// 开始</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStart</span><span class="hljs-params">()</span>;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 摇杆角度变化</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> angle 角度[0,360)</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">angle</span><span class="hljs-params">(<span class="hljs-type">double</span> angle)</span>;<br><br>        <span class="hljs-comment">// 结束</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">onFinish</span><span class="hljs-params">()</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 摇动距离</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OnDistanceLevelListener</span> &#123;<br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDistanceLevel</span><span class="hljs-params">(<span class="hljs-type">int</span> level)</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> CallBackMode <span class="hljs-title function_">getCallBackMode</span><span class="hljs-params">(<span class="hljs-type">int</span> mode)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (mode) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> CallBackMode.CALL_BACK_MODE_MOVE;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> CallBackMode.CALL_BACK_MODE_STATE_CHANGE;<br>        &#125;<br>        <span class="hljs-keyword">return</span> mCallBackMode;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>android开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>andorid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>天气时钟</title>
    <link href="/posts/2581b914/"/>
    <url>/posts/2581b914/</url>
    
    <content type="html"><![CDATA[<p>最近在玩esp32，手边正好还有一块16bit的TFT_LCD屏幕，大小只有135×240，思来想去还是用来显示时间和天气吧🤔花费一番小心思，还添上了一个圆形带指针的可以转动的表😓，天气用的心知天气提供的api，方便且免费且贴心的送精美天气图标一份😻</p><span id="more"></span><p>成品去仓库看吧，就不贴图了🤭</p><blockquote><p>Gitee: <a href="https://gitee.com/Zone2515/esp32">天气时钟</a></p></blockquote><h2 id="连WiFi"><a href="#连WiFi" class="headerlink" title="连WiFi"></a>连WiFi</h2><p>过程基本是不变的，记录一下方便copy</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WiFi.h&gt;</span></span><br><br><span class="hljs-comment">//这里改用char*变量也可以，但是Ardunio会有警告似乎是让改成String，改了之后报错（烦），现在就直接定义成宏，以后再看看。</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ssid <span class="hljs-string">&quot;balabala&quot;</span> <span class="hljs-comment">// 修改wifi名称</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> password <span class="hljs-string">&quot;*******&quot;</span> <span class="hljs-comment">// 修改wifi密码</span></span><br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;<br>    ...<br>    WiFi.<span class="hljs-built_in">begin</span>(ssid, password);<br>    <span class="hljs-built_in">delay</span>(<span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">while</span> (WiFi.<span class="hljs-built_in">status</span>() != WL_CONNECTED) &#123;<br>        <span class="hljs-comment">// 等待连接，loading是一个加载动画，一会儿说</span><br>        <span class="hljs-comment">//for (byte n = 0; n &lt; 10; n++) &#123;</span><br>        <span class="hljs-comment">//    loading(&quot;Connecting Wifi&quot;, 50);</span><br>        <span class="hljs-comment">//&#125;</span><br>    &#125;<br>    <span class="hljs-comment">//连接成功</span><br>    <span class="hljs-keyword">if</span> (WiFi.<span class="hljs-built_in">status</span>() == WL_CONNECTED) &#123;<br>        Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;wifi is connected!&quot;</span>);<br>        Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;SSID: &quot;</span>);<br>        Serial.<span class="hljs-built_in">println</span>(WiFi.<span class="hljs-built_in">SSID</span>());<br>        IPAddress ip = WiFi.<span class="hljs-built_in">localIP</span>();<br>        Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;IP Address: &quot;</span>);<br>        Serial.<span class="hljs-built_in">println</span>(ip);<br>    &#125;<br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>连上WiFi，就可以用它上网了（连的WiFi确保能上网🫵</p><p>这里照着别人做了个动画，等待连接WiFi就不会无聊了（确信</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;TFT_eSPI.h&gt;</span></span><br><br>TFT_eSPI tft = <span class="hljs-built_in">TFT_eSPI</span>();<br>TFT_eSprite clk = <span class="hljs-built_in">TFT_eSprite</span>(&amp;tft);<br>byte loadNum = <span class="hljs-number">6</span>; <span class="hljs-comment">//进度条长度</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loading</span><span class="hljs-params">(String msg, byte delayTime)</span> </span>&#123;<br>  clk.<span class="hljs-built_in">createSprite</span>(<span class="hljs-number">200</span>, <span class="hljs-number">50</span>);<br>  clk.<span class="hljs-built_in">fillSprite</span>(<span class="hljs-number">0x0000</span>);<br>  clk.<span class="hljs-built_in">drawRoundRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">200</span>, <span class="hljs-number">16</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0xFFFF</span>);<br>  clk.<span class="hljs-built_in">fillRoundRect</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, loadNum, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0xFFFF</span>);<br>  clk.<span class="hljs-built_in">setTextColor</span>(TFT_GREEN, <span class="hljs-number">0x0000</span>);<br>  clk.<span class="hljs-built_in">setTextDatum</span>(CC_DATUM);<br>  clk.<span class="hljs-built_in">drawString</span>(msg, <span class="hljs-number">100</span>, <span class="hljs-number">40</span>, <span class="hljs-number">2</span>);<br>  clk.<span class="hljs-built_in">pushSprite</span>(<span class="hljs-number">20</span>, <span class="hljs-number">30</span>);<br>  clk.<span class="hljs-built_in">deleteSprite</span>();<br>  loadNum += <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> (loadNum &gt;= <span class="hljs-number">195</span>) &#123;<br>    loadNum = <span class="hljs-number">195</span>;<br>  &#125;<br>  <span class="hljs-built_in">delay</span>(delayTime);<br>&#125;<br><span class="hljs-comment">//加载成功后过渡（动画）</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">successload</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>  loadNum = <span class="hljs-number">6</span>;<br>  clk.<span class="hljs-built_in">createSprite</span>(<span class="hljs-number">200</span>, <span class="hljs-number">50</span>);<br>  clk.<span class="hljs-built_in">fillSprite</span>(<span class="hljs-number">0x0000</span>);<br>  clk.<span class="hljs-built_in">setTextDatum</span>(CC_DATUM);<br>  clk.<span class="hljs-built_in">setTextColor</span>(TFT_GREEN, <span class="hljs-number">0x0000</span>);<br>  clk.<span class="hljs-built_in">drawString</span>(msg, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>);<br>  clk.<span class="hljs-built_in">pushSprite</span>(<span class="hljs-number">20</span>, <span class="hljs-number">30</span>);<br>  clk.<span class="hljs-built_in">deleteSprite</span>();<br>  <span class="hljs-built_in">delay</span>(<span class="hljs-number">1000</span>);<br>  tft.<span class="hljs-built_in">fillScreen</span>(<span class="hljs-number">0x0000</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="时钟"><a href="#时钟" class="headerlink" title="时钟"></a>时钟</h2><p>有了网就可以获取网络时间了，一顿搜索就被我找到啦，整理一下如何获取实时网络时间，也方便以后copy🤭</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WiFiUdp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;NTPClient.h&gt;</span></span><br><br>WiFiUDP ntpUDP;<br><span class="hljs-function">NTPClient <span class="hljs-title">timeClient</span><span class="hljs-params">(ntpUDP)</span></span>;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;<br>    ...<span class="hljs-comment">//初始化网络，tft等</span><br>    timeClient.<span class="hljs-built_in">setTimeOffset</span>(<span class="hljs-number">28800</span>);<span class="hljs-comment">//设置时区偏差</span><br>    timeClient.<span class="hljs-built_in">begin</span>();<br>    ...<br>&#125;<br><span class="hljs-comment">// 获取年月日时分秒，并调用显示函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">updateDate</span><span class="hljs-params">()</span></span>&#123;<br>  timeClient.<span class="hljs-built_in">update</span>();<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> epochTime = timeClient.<span class="hljs-built_in">getEpochTime</span>();<br>  <span class="hljs-type">int</span> hour = timeClient.<span class="hljs-built_in">getHours</span>();<br>  <span class="hljs-type">int</span> minu = timeClient.<span class="hljs-built_in">getMinutes</span>();<br>  <span class="hljs-type">int</span> secs = timeClient.<span class="hljs-built_in">getSeconds</span>();<br>  <span class="hljs-type">int</span> weekday = timeClient.<span class="hljs-built_in">getDay</span>();<br>  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">tm</span>* ptm = <span class="hljs-built_in">gmtime</span>((<span class="hljs-type">time_t</span>*)&amp;epochTime);<br>  <span class="hljs-type">int</span> day = ptm-&gt;tm_mday;<br>  <span class="hljs-type">int</span> month = ptm-&gt;tm_mon + <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> year = ptm-&gt;tm_year+<span class="hljs-number">1900</span>;<br>  <span class="hljs-comment">//圆表盘</span><br>  <span class="hljs-built_in">showClock</span>(hour,minu,secs,<span class="hljs-number">60</span>,<span class="hljs-number">100</span>,<span class="hljs-number">60</span>);<br>  <span class="hljs-comment">//文字  </span><br>  <span class="hljs-built_in">showDate</span>(hour, minu,secs,year,month, day, weekday);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>显示文字没啥好说的，就是调调位置，改改颜色，变变大小。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showText</span><span class="hljs-params">(<span class="hljs-type">int16_t</span> x, <span class="hljs-type">int16_t</span> y, <span class="hljs-type">uint8_t</span> font, <span class="hljs-type">uint8_t</span> s, <span class="hljs-type">uint16_t</span> fg, <span class="hljs-type">uint16_t</span> bg, <span class="hljs-type">const</span> String str)</span> </span>&#123;<br>  tft.<span class="hljs-built_in">setCursor</span>(x, y, font);<br>  tft.<span class="hljs-built_in">setTextColor</span>(fg, bg);<br>  tft.<span class="hljs-built_in">setTextSize</span>(s);<br>  tft.<span class="hljs-built_in">println</span>(str);<br>&#125;<br><span class="hljs-comment">//数字转成对应的文字</span><br><span class="hljs-function">String <span class="hljs-title">getWeekdays</span><span class="hljs-params">(<span class="hljs-type">int</span> weekday)</span> </span>&#123;<br>  String res;<br>  <span class="hljs-keyword">switch</span> (weekday) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: res = <span class="hljs-string">&quot;Mon. &quot;</span>; <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: res = <span class="hljs-string">&quot;Tues.&quot;</span>; <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: res = <span class="hljs-string">&quot;Wed. &quot;</span>; <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: res = <span class="hljs-string">&quot;Thur.&quot;</span>; <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>: res = <span class="hljs-string">&quot;Fri. &quot;</span>; <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>: res = <span class="hljs-string">&quot;Sat. &quot;</span>; <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>: res = <span class="hljs-string">&quot;Sun. &quot;</span>; <span class="hljs-keyword">break</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showDate</span><span class="hljs-params">(<span class="hljs-type">int</span> hou, <span class="hljs-type">int</span> minu, <span class="hljs-type">int</span> secs,<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> mon, <span class="hljs-type">int</span> days, <span class="hljs-type">int</span> weekday)</span> </span>&#123;<br>  String shour,sminu,ssecs;<br>  <span class="hljs-keyword">if</span> (hou &lt; <span class="hljs-number">10</span>) &#123;<br>    shour = <span class="hljs-string">&quot;0&quot;</span>+(String)hou+<span class="hljs-string">&quot;:&quot;</span>;<br>  &#125; <span class="hljs-keyword">else</span> shour = (String)hou+<span class="hljs-string">&quot;:&quot;</span>;<br>  <span class="hljs-keyword">if</span> (minu &lt; <span class="hljs-number">10</span>) &#123;<br>    sminu = <span class="hljs-string">&quot;0&quot;</span>+(String)minu;<br>  &#125; <span class="hljs-keyword">else</span> sminu = (String)minu;<br>  <span class="hljs-keyword">if</span> (secs &lt; <span class="hljs-number">10</span>) &#123;<br>    ssecs = <span class="hljs-string">&quot;0&quot;</span>+(String)secs;<br>  &#125; <span class="hljs-keyword">else</span> ssecs = (String)secs;<br>  <span class="hljs-built_in">showText</span>(<span class="hljs-number">15</span>, <span class="hljs-number">30</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, TFT_WHITE, TFT_BLACK, shour+sminu);<br>  <span class="hljs-built_in">showText</span>(<span class="hljs-number">90</span>, <span class="hljs-number">40</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, TFT_WHITE , TFT_BLACK, ssecs);<br>  <span class="hljs-built_in">showText</span>(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, TFT_CYAN , TFT_BLACK, (String)mon + <span class="hljs-string">&quot;/&quot;</span> + (String)days+<span class="hljs-string">&quot;/&quot;</span>+(String)year+<span class="hljs-string">&quot; &quot;</span>+<span class="hljs-built_in">getWeekdays</span>(weekday));<br>&#125;<br><br></code></pre></td></tr></table></figure><p>圆标盘的显示原理也非常简单。以显示秒针为例，做个简单说明。</p><p><a href="https://imgse.com/i/pCfDn9f"><img src="https://s1.ax1x.com/2023/07/12/pCfDn9f.jpg" alt="pCfDn9f.jpg"></a></p><p>根据时间确定两个端点即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showClock</span><span class="hljs-params">(<span class="hljs-type">int</span> hou, <span class="hljs-type">int</span> minu, <span class="hljs-type">int</span> secs,<span class="hljs-type">int</span> cx, <span class="hljs-type">int</span> cy, <span class="hljs-type">int</span> size)</span></span>&#123;<br>  <span class="hljs-type">int</span> sr =  size/<span class="hljs-number">2</span>;<br>  <span class="hljs-type">int</span> mr =  sr*<span class="hljs-number">3</span>/<span class="hljs-number">4</span>;<br>  <span class="hljs-type">int</span> hr =  sr/<span class="hljs-number">2</span>;<br><br>  <span class="hljs-type">int</span> sx = (<span class="hljs-type">int</span>)(sr+sr*<span class="hljs-built_in">sin</span>((<span class="hljs-type">double</span>)secs*M_PI/<span class="hljs-number">30</span>));<br>  <span class="hljs-type">int</span> sy = (<span class="hljs-type">int</span>)(sr-sr*<span class="hljs-built_in">cos</span>((<span class="hljs-type">double</span>)secs*M_PI/<span class="hljs-number">30</span>));<br>  <span class="hljs-type">int</span> mx = (<span class="hljs-type">int</span>)(sr+mr*<span class="hljs-built_in">sin</span>((<span class="hljs-type">double</span>)minu*M_PI/<span class="hljs-number">30</span>));<br>  <span class="hljs-type">int</span> my = (<span class="hljs-type">int</span>)(sr-mr*<span class="hljs-built_in">cos</span>((<span class="hljs-type">double</span>)minu*M_PI/<span class="hljs-number">30</span>));<br>  <span class="hljs-type">int</span> hx = (<span class="hljs-type">int</span>)(sr+hr*<span class="hljs-built_in">sin</span>((<span class="hljs-type">double</span>)hou*M_PI/<span class="hljs-number">6</span>));<br>  <span class="hljs-type">int</span> hy = (<span class="hljs-type">int</span>)(sr-hr*<span class="hljs-built_in">cos</span>((<span class="hljs-type">double</span>)hou*M_PI/<span class="hljs-number">6</span>));<br><br>  clk.<span class="hljs-built_in">createSprite</span>(size+<span class="hljs-number">6</span>, size+<span class="hljs-number">6</span>);  <br>  clk.<span class="hljs-built_in">fillSprite</span>(TFT_BLACK);<br>  clk.<span class="hljs-built_in">drawCircle</span>(sr,sr,sr,TFT_WHITE);<br>  <br>  clk.<span class="hljs-built_in">fillRect</span>(sr<span class="hljs-number">-2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,TFT_WHITE);<br>  clk.<span class="hljs-built_in">fillRect</span>(size<span class="hljs-number">-6</span>,sr<span class="hljs-number">-2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,TFT_WHITE);<br>  clk.<span class="hljs-built_in">fillRect</span>(sr<span class="hljs-number">-2</span>,size<span class="hljs-number">-6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,TFT_WHITE);<br>  clk.<span class="hljs-built_in">fillRect</span>(<span class="hljs-number">0</span>,sr<span class="hljs-number">-2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,TFT_WHITE);<br><br>  clk.<span class="hljs-built_in">drawLine</span>(sr,sr,sx,sy,TFT_RED);<br>  clk.<span class="hljs-built_in">drawLine</span>(sr,sr,mx,my,TFT_WHITE);<br>  clk.<span class="hljs-built_in">drawLine</span>(sr,sr,hx,hy,TFT_YELLOW);<br>  clk.<span class="hljs-built_in">pushSprite</span>(cx-size/<span class="hljs-number">2</span>, cy-size/<span class="hljs-number">2</span>);<br>  clk.<span class="hljs-built_in">deleteSprite</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="天气"><a href="#天气" class="headerlink" title="天气"></a>天气</h2><p>心知天气注册账号后就能免费申请产品使用api了（白嫖党狂喜🤭<br>除了发送http请求外，还要解析返回的json字符串</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;HTTPClient.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ArduinoJson.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;image.h&quot;</span></span><br><br><span class="hljs-function">DynamicJsonDocument <span class="hljs-title">doc</span><span class="hljs-params">(<span class="hljs-number">512</span>)</span></span>;<br><br><span class="hljs-comment">//发送请求，解析响应，调用显示函数。 key city 记得替换</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">updateWeather</span><span class="hljs-params">()</span> </span>&#123;<br>  HTTPClient http;<br>  http.<span class="hljs-built_in">begin</span>(<span class="hljs-string">&quot;https://api.seniverse.com/v3/weather/now.json?key=&quot;</span>+key+<span class="hljs-string">&quot;&amp;location=&quot;</span>+city+<span class="hljs-string">&quot;&amp;language=en&amp;unit=c&quot;</span>);<br>  <span class="hljs-type">int</span> httpCode = http.<span class="hljs-built_in">GET</span>();<br>  <span class="hljs-keyword">if</span> (httpCode &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">if</span> (httpCode == HTTP_CODE_OK) &#123;<br>      String payload = http.<span class="hljs-built_in">getString</span>();<br>      <span class="hljs-built_in">deserializeJson</span>(doc, payload);<br>      Serial.<span class="hljs-built_in">println</span>(payload);<br>      JsonObject root = doc.<span class="hljs-built_in">as</span>&lt;JsonObject&gt;();<br>      JsonObject  result = root[<span class="hljs-string">&quot;results&quot;</span>][<span class="hljs-number">0</span>];<br>      JsonObject location = result[<span class="hljs-string">&quot;location&quot;</span>];<br>      String name = location[<span class="hljs-string">&quot;name&quot;</span>];<br>      String country = location[<span class="hljs-string">&quot;country&quot;</span>];<br>      JsonObject now = result[<span class="hljs-string">&quot;now&quot;</span>];<br>      String text = now[<span class="hljs-string">&quot;text&quot;</span>];<br>      String code = now[<span class="hljs-string">&quot;code&quot;</span>];<br>      String temperature = now[<span class="hljs-string">&quot;temperature&quot;</span>];<br>      String last_update = result[<span class="hljs-string">&quot;last_update&quot;</span>];<br>      <br>      <span class="hljs-built_in">showWeather</span>(name,country,text,code.<span class="hljs-built_in">toInt</span>(),temperature);<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    Serial.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[HTTP] GET... failed, error: %s\n&quot;</span>, http.<span class="hljs-built_in">errorToString</span>(httpCode).<span class="hljs-built_in">c_str</span>());<br>  &#125;<br>  http.<span class="hljs-built_in">end</span>();<br>&#125;<br><span class="hljs-comment">//weatherIcons二维数组，存储天气图标，sheshidu存储℃符号，均在image.h中定义</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showWeather</span><span class="hljs-params">(String name,String country,String text,<span class="hljs-type">int</span> code,String temperature)</span></span>&#123;<br>  clk.<span class="hljs-built_in">createSprite</span>(<span class="hljs-number">110</span>, <span class="hljs-number">135</span>);<br>  clk.<span class="hljs-built_in">fillSprite</span>(TFT_BLACK);<br>  clk.<span class="hljs-built_in">setSwapBytes</span>(<span class="hljs-literal">true</span>);<br>  clk.<span class="hljs-built_in">setTextColor</span>(TFT_CYAN, TFT_BLACK);<br>  clk.<span class="hljs-built_in">setCursor</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>);<br>  clk.<span class="hljs-built_in">setTextSize</span>(<span class="hljs-number">2</span>);<br>  clk.<span class="hljs-built_in">println</span>(name+<span class="hljs-string">&quot; &quot;</span>+country);<br>  clk.<span class="hljs-built_in">setTextColor</span>(TFT_WHITE, TFT_BLACK);<br>  <span class="hljs-keyword">if</span>(code==<span class="hljs-number">99</span>) code = <span class="hljs-number">39</span>;<br>  clk.<span class="hljs-built_in">pushImage</span>(<span class="hljs-number">0</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>,<span class="hljs-number">50</span>,weatherIcons[code]);<br>  clk.<span class="hljs-built_in">setCursor</span>(<span class="hljs-number">5</span>, <span class="hljs-number">95</span>, <span class="hljs-number">1</span>);<br>  clk.<span class="hljs-built_in">setTextSize</span>(<span class="hljs-number">2</span>);<br>  clk.<span class="hljs-built_in">println</span>(text);<br>  clk.<span class="hljs-built_in">setCursor</span>(<span class="hljs-number">70</span>, <span class="hljs-number">40</span>, <span class="hljs-number">1</span>);<br>  clk.<span class="hljs-built_in">setTextSize</span>(<span class="hljs-number">2</span>);<br>  clk.<span class="hljs-built_in">println</span>(temperature);<br>  clk.<span class="hljs-built_in">pushImage</span>(<span class="hljs-number">70</span>,<span class="hljs-number">60</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>,sheshidu);<br>  clk.<span class="hljs-built_in">pushSprite</span>(<span class="hljs-number">130</span>, <span class="hljs-number">0</span>);<br>  clk.<span class="hljs-built_in">deleteSprite</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h2><p>两个功能模块都实现了，现在就是任务调度的问题，又是一顿搜，我觉得TaskScheduler这个库不错。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;TaskScheduler.h&gt;</span></span><br><br>Scheduler runner;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">updateDate</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">updateWeather</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">//时间每0.1ms刷新一次</span><br><span class="hljs-function">Task <span class="hljs-title">dateTask</span><span class="hljs-params">(<span class="hljs-number">100</span>, TASK_FOREVER, &amp;updateDate)</span></span>;<br><span class="hljs-comment">//天气每分钟更新一次</span><br><span class="hljs-function">Task <span class="hljs-title">weatherTask</span><span class="hljs-params">(<span class="hljs-number">60000</span>, TASK_FOREVER, &amp;updateWeather)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;<br>    ...<br>    runner.<span class="hljs-built_in">init</span>();<br>    runner.<span class="hljs-built_in">addTask</span>(dateTask);<br>    runner.<span class="hljs-built_in">addTask</span>(weatherTask);<br>    dateTask.<span class="hljs-built_in">enable</span>();<br>    weatherTask.<span class="hljs-built_in">enable</span>();<br>    ...<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br>    runner.<span class="hljs-built_in">execute</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>记录完毕。</p>]]></content>
    
    
    <categories>
      
      <category>单片机开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>esp32</tag>
      
      <tag>精选</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
